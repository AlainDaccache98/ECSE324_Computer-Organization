
//campus.mcgill.ca/emf/SWE/mabdel69/Desktop/Lab5/HEX_displays.s.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	a0 0d 00 00 ac 0d 00 00 b8 0d 00 00 c4 0d 00 00     ................
      30:	d0 0d 00 00 58 2d 00 00 48 0c 00 00 dc 0d 00 00     ....X-..H.......

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_region_zero_size_ram+0x88>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_region_zero_size_ram+0x84>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_region_zero_size_ram+0x8c>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_region_zero_size_ram+0x54>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_region_zero_size_ram+0x54>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_region_zero_size_ram+0x3c>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_region_zero_size_ram+0x74>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_region_zero_size_ram+0x64>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_region_zero_size_ram+0x14>
      d4:	eb000b06 	bl	2cf4 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00002e40 	.word	0x00002e40

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <ICDISER+0x18>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <ICDISER+0x1c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <ICDISER+0x20>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	000320a0 	.word	0x000320a0

00000124 <__cs3_heap_start_ptr>:
     124:	000320f8 	.word	0x000320f8

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	000320a8 	.word	0x000320a8
     170:	000320ab 	.word	0x000320ab
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <ICDICER+0x38>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <ICDICER+0x3c>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <ICDICER+0x20>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <ICDICER+0x40>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <ICDICER+0x18>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <ICDICER+0x18>
     1b8:	000320a8 	.word	0x000320a8
     1bc:	000320a8 	.word	0x000320a8
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	000320a8 	.word	0x000320a8
     200:	00000000 	.word	0x00000000
     204:	00002de4 	.word	0x00002de4

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00002de4 	.word	0x00002de4
     250:	000320ac 	.word	0x000320ac
     254:	00002e40 	.word	0x00002e40
     258:	00000000 	.word	0x00000000

0000025c <HEX_clear_ASM>:
     25c:	e3a01000 	mov	r1, #0
     260:	ea000004 	b	278 <WRITE>

00000264 <HEX_flood_ASM>:
     264:	e3a0107f 	mov	r1, #127	; 0x7f
     268:	ea000002 	b	278 <WRITE>

0000026c <HEX_write_ASM>:
     26c:	e59f2064 	ldr	r2, [pc, #100]	; 2d8 <PATTERNS+0x14>
     270:	e7d21001 	ldrb	r1, [r2, r1]
     274:	eaffffff 	b	278 <WRITE>

00000278 <WRITE>:
     278:	e92d0030 	push	{r4, r5}
     27c:	e59f2058 	ldr	r2, [pc, #88]	; 2dc <PATTERNS+0x18>
     280:	e3a03000 	mov	r3, #0
     284:	e3e050ff 	mvn	r5, #255	; 0xff

00000288 <LOOP>:
     288:	e3100001 	tst	r0, #1
     28c:	0a000003 	beq	2a0 <CONTINUE>
     290:	e5924000 	ldr	r4, [r2]
     294:	e0044005 	and	r4, r4, r5
     298:	e1844001 	orr	r4, r4, r1
     29c:	e5824000 	str	r4, [r2]

000002a0 <CONTINUE>:
     2a0:	e1a05c65 	ror	r5, r5, #24
     2a4:	e1a01c61 	ror	r1, r1, #24
     2a8:	e2833001 	add	r3, r3, #1
     2ac:	e3530004 	cmp	r3, #4
     2b0:	059f2028 	ldreq	r2, [pc, #40]	; 2e0 <PATTERNS+0x1c>
     2b4:	e1b000a0 	lsrs	r0, r0, #1
     2b8:	1afffff2 	bne	288 <LOOP>
     2bc:	e8bd0030 	pop	{r4, r5}
     2c0:	e12fff1e 	bx	lr

000002c4 <PATTERNS>:
     2c4:	4f5b063f 	.word	0x4f5b063f
     2c8:	077d6d66 	.word	0x077d6d66
     2cc:	7c776f7f 	.word	0x7c776f7f
     2d0:	71795e39 	.word	0x71795e39
     2d4:	000000ff 	.word	0x000000ff
     2d8:	000002c4 	.word	0x000002c4
     2dc:	ff200020 	.word	0xff200020
     2e0:	ff200030 	.word	0xff200030

000002e4 <HPS_TIM_config_ASM>:
     2e4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     2e8:	e3a01000 	mov	r1, #0
     2ec:	e3a02001 	mov	r2, #1
     2f0:	e5907000 	ldr	r7, [r0]
     2f4:	eaffffff 	b	2f8 <LOOP>

000002f8 <LOOP>:
     2f8:	e1170112 	tst	r7, r2, lsl r1
     2fc:	0a000000 	beq	304 <CONTINUE>
     300:	eb000004 	bl	318 <CONFIG>

00000304 <CONTINUE>:
     304:	e2811001 	add	r1, r1, #1
     308:	e3510004 	cmp	r1, #4
     30c:	bafffff9 	blt	2f8 <LOOP>

00000310 <DONE>:
     310:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
     314:	e12fff1e 	bx	lr

00000318 <CONFIG>:
     318:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     31c:	e59f30e4 	ldr	r3, [pc, #228]	; 408 <HPS_TIM_BASE+0x10>
     320:	e7934101 	ldr	r4, [r3, r1, lsl #2]
     324:	eb000005 	bl	340 <DISABLE>
     328:	eb000008 	bl	350 <SET_LOAD_VAL>
     32c:	eb00000e 	bl	36c <SET_LOAD_BIT>
     330:	eb000013 	bl	384 <SET_INT_BIT>
     334:	eb000019 	bl	3a0 <SET_EN_BIT>
     338:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     33c:	e12fff1e 	bx	lr

00000340 <DISABLE>:
     340:	e5945008 	ldr	r5, [r4, #8]
     344:	e3c55001 	bic	r5, r5, #1
     348:	e5845008 	str	r5, [r4, #8]
     34c:	e12fff1e 	bx	lr

00000350 <SET_LOAD_VAL>:
     350:	e5905004 	ldr	r5, [r0, #4]
     354:	e3a06019 	mov	r6, #25
     358:	e0050695 	mul	r5, r5, r6
     35c:	e3510002 	cmp	r1, #2
     360:	b1a05105 	lsllt	r5, r5, #2
     364:	e5845000 	str	r5, [r4]
     368:	e12fff1e 	bx	lr

0000036c <SET_LOAD_BIT>:
     36c:	e5945008 	ldr	r5, [r4, #8]
     370:	e5906008 	ldr	r6, [r0, #8]
     374:	e3c55002 	bic	r5, r5, #2
     378:	e1855086 	orr	r5, r5, r6, lsl #1
     37c:	e5845008 	str	r5, [r4, #8]
     380:	e12fff1e 	bx	lr

00000384 <SET_INT_BIT>:
     384:	e5945008 	ldr	r5, [r4, #8]
     388:	e590600c 	ldr	r6, [r0, #12]
     38c:	e2266001 	eor	r6, r6, #1
     390:	e3c55004 	bic	r5, r5, #4
     394:	e1855106 	orr	r5, r5, r6, lsl #2
     398:	e5845008 	str	r5, [r4, #8]
     39c:	e12fff1e 	bx	lr

000003a0 <SET_EN_BIT>:
     3a0:	e5945008 	ldr	r5, [r4, #8]
     3a4:	e5906010 	ldr	r6, [r0, #16]
     3a8:	e3c55001 	bic	r5, r5, #1
     3ac:	e1855006 	orr	r5, r5, r6
     3b0:	e5845008 	str	r5, [r4, #8]
     3b4:	e12fff1e 	bx	lr

000003b8 <HPS_TIM_clear_INT_ASM>:
     3b8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     3bc:	e3a01000 	mov	r1, #0
     3c0:	e3a02001 	mov	r2, #1
     3c4:	eaffffff 	b	3c8 <INT_LOOP>

000003c8 <INT_LOOP>:
     3c8:	e1100112 	tst	r0, r2, lsl r1
     3cc:	0a000000 	beq	3d4 <INT_CONTINUE>
     3d0:	eb000004 	bl	3e8 <CLEAR_IT>

000003d4 <INT_CONTINUE>:
     3d4:	e2811001 	add	r1, r1, #1
     3d8:	e3510004 	cmp	r1, #4
     3dc:	bafffff9 	blt	3c8 <INT_LOOP>

000003e0 <INT_DONE>:
     3e0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     3e4:	e12fff1e 	bx	lr

000003e8 <CLEAR_IT>:
     3e8:	e59f3018 	ldr	r3, [pc, #24]	; 408 <HPS_TIM_BASE+0x10>
     3ec:	e7933101 	ldr	r3, [r3, r1, lsl #2]
     3f0:	e593300c 	ldr	r3, [r3, #12]
     3f4:	e12fff1e 	bx	lr

000003f8 <HPS_TIM_BASE>:
     3f8:	ffc08000 	.word	0xffc08000
     3fc:	ffc09000 	.word	0xffc09000
     400:	ffd00000 	.word	0xffd00000
     404:	ffd01000 	.word	0xffd01000
     408:	000003f8 	.word	0x000003f8

0000040c <hps_tim0_int_flag>:
     40c:	00000000 	.word	0x00000000

00000410 <A9_PRIV_TIM_ISR>:

hps_tim0_int_flag:
	.word 0x0

A9_PRIV_TIM_ISR:
	BX LR
     410:	e12fff1e 	bx	lr

00000414 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     414:	e12fff1e 	bx	lr

00000418 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
     418:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV	R0, #0x1
     41c:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM
     420:	ebffffe4 	bl	3b8 <HPS_TIM_clear_INT_ASM>
	
	LDR R0, =hps_tim0_int_flag
     424:	e59f003c 	ldr	r0, [pc, #60]	; 468 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1
     428:	e3a01001 	mov	r1, #1
	STR R1, [R0]
     42c:	e5801000 	str	r1, [r0]
	
	POP {LR}
     430:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     434:	e12fff1e 	bx	lr

00000438 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     438:	e12fff1e 	bx	lr

0000043c <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     43c:	e12fff1e 	bx	lr

00000440 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     440:	e12fff1e 	bx	lr

00000444 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     444:	e12fff1e 	bx	lr

00000448 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	BX LR
     448:	e12fff1e 	bx	lr

0000044c <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     44c:	e12fff1e 	bx	lr

00000450 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     450:	e12fff1e 	bx	lr

00000454 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     454:	e12fff1e 	bx	lr

00000458 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     458:	e12fff1e 	bx	lr

0000045c <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     45c:	e12fff1e 	bx	lr

00000460 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     460:	e12fff1e 	bx	lr

00000464 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     464:	e12fff1e 	bx	lr
	PUSH {LR}
	
	MOV	R0, #0x1
	BL HPS_TIM_clear_INT_ASM
	
	LDR R0, =hps_tim0_int_flag
     468:	0000040c 	.word	0x0000040c

0000046c <read_LEDs_ASM>:
     46c:	e59f1010 	ldr	r1, [pc, #16]	; 484 <write_LEDs_ASM+0xc>
     470:	e5910000 	ldr	r0, [r1]
     474:	e12fff1e 	bx	lr

00000478 <write_LEDs_ASM>:
     478:	e59f1004 	ldr	r1, [pc, #4]	; 484 <write_LEDs_ASM+0xc>
     47c:	e5810000 	str	r0, [r1]
     480:	e12fff1e 	bx	lr
     484:	ff200000 	.word	0xff200000

00000488 <audio_read_data_ASM>:
     488:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     48c:	e92d0003 	push	{r0, r1}
     490:	eb000093 	bl	6e4 <audio_read_ralc_ASM>
     494:	e3500000 	cmp	r0, #0
     498:	08bd0003 	popeq	{r0, r1}
     49c:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     4a0:	03a00000 	moveq	r0, #0
     4a4:	012fff1e 	bxeq	lr
     4a8:	eb000092 	bl	6f8 <audio_read_rarc_ASM>
     4ac:	e3500000 	cmp	r0, #0
     4b0:	08bd0003 	popeq	{r0, r1}
     4b4:	03a00000 	moveq	r0, #0
     4b8:	012fff1e 	bxeq	lr
     4bc:	e8bd0003 	pop	{r0, r1}
     4c0:	e59f2240 	ldr	r2, [pc, #576]	; 708 <audio_read_rarc_ASM+0x10>
     4c4:	e5922000 	ldr	r2, [r2]
     4c8:	e5802000 	str	r2, [r0]
     4cc:	e59f3238 	ldr	r3, [pc, #568]	; 70c <audio_read_rarc_ASM+0x14>
     4d0:	e5933000 	ldr	r3, [r3]
     4d4:	e5813000 	str	r3, [r1]
     4d8:	e3a00001 	mov	r0, #1

000004dc <audio_read_leftdata_ASM>:
     4dc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     4e0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     4e4:	eb00007e 	bl	6e4 <audio_read_ralc_ASM>
     4e8:	e3500000 	cmp	r0, #0
     4ec:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     4f0:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     4f4:	03a00000 	moveq	r0, #0
     4f8:	012fff1e 	bxeq	lr
     4fc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     500:	e59f2200 	ldr	r2, [pc, #512]	; 708 <audio_read_rarc_ASM+0x10>
     504:	e5922000 	ldr	r2, [r2]
     508:	e5802000 	str	r2, [r0]
     50c:	e3a00001 	mov	r0, #1
     510:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     514:	e12fff1e 	bx	lr

00000518 <audio_read_rightdata_ASM>:
     518:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     51c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     520:	eb000074 	bl	6f8 <audio_read_rarc_ASM>
     524:	e3500000 	cmp	r0, #0
     528:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     52c:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     530:	03a00000 	moveq	r0, #0
     534:	012fff1e 	bxeq	lr
     538:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     53c:	e59f21c8 	ldr	r2, [pc, #456]	; 70c <audio_read_rarc_ASM+0x14>
     540:	e5922000 	ldr	r2, [r2]
     544:	e5802000 	str	r2, [r0]
     548:	e3a00001 	mov	r0, #1
     54c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     550:	e12fff1e 	bx	lr

00000554 <audio_write_data_ASM>:
     554:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     558:	e92d0003 	push	{r0, r1}
     55c:	eb000056 	bl	6bc <audio_read_wslc_ASM>
     560:	e3500000 	cmp	r0, #0
     564:	08bd0003 	popeq	{r0, r1}
     568:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     56c:	03a00000 	moveq	r0, #0
     570:	012fff1e 	bxeq	lr
     574:	eb000055 	bl	6d0 <audio_read_wsrc_ASM>
     578:	e3500000 	cmp	r0, #0
     57c:	08bd0003 	popeq	{r0, r1}
     580:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     584:	03a00000 	moveq	r0, #0
     588:	012fff1e 	bxeq	lr
     58c:	e8bd0003 	pop	{r0, r1}
     590:	e59f2170 	ldr	r2, [pc, #368]	; 708 <audio_read_rarc_ASM+0x10>
     594:	e5820000 	str	r0, [r2]
     598:	e59f316c 	ldr	r3, [pc, #364]	; 70c <audio_read_rarc_ASM+0x14>
     59c:	e5831000 	str	r1, [r3]
     5a0:	e3a00001 	mov	r0, #1
     5a4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     5a8:	e12fff1e 	bx	lr

000005ac <audio_write_leftdata_ASM>:
     5ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     5b0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     5b4:	eb000040 	bl	6bc <audio_read_wslc_ASM>
     5b8:	e3500000 	cmp	r0, #0
     5bc:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     5c0:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     5c4:	03a00000 	moveq	r0, #0
     5c8:	012fff1e 	bxeq	lr
     5cc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     5d0:	e59f2130 	ldr	r2, [pc, #304]	; 708 <audio_read_rarc_ASM+0x10>
     5d4:	e5820000 	str	r0, [r2]
     5d8:	e3a00001 	mov	r0, #1
     5dc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     5e0:	e12fff1e 	bx	lr

000005e4 <audio_write_rightdata_ASM>:
     5e4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     5e8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     5ec:	eb000037 	bl	6d0 <audio_read_wsrc_ASM>
     5f0:	e3500000 	cmp	r0, #0
     5f4:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     5f8:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     5fc:	03a00000 	moveq	r0, #0
     600:	012fff1e 	bxeq	lr
     604:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     608:	e59f20fc 	ldr	r2, [pc, #252]	; 70c <audio_read_rarc_ASM+0x14>
     60c:	e5820000 	str	r0, [r2]
     610:	e3a00001 	mov	r0, #1
     614:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     618:	e12fff1e 	bx	lr

0000061c <audio_enable_read_fifo_clear_ASM>:
     61c:	e59f00ec 	ldr	r0, [pc, #236]	; 710 <audio_read_rarc_ASM+0x18>
     620:	e5901000 	ldr	r1, [r0]
     624:	e3811004 	orr	r1, r1, #4
     628:	e5801000 	str	r1, [r0]
     62c:	e12fff1e 	bx	lr

00000630 <audio_enable_write_fifo_clear_ASM>:
     630:	e59f00d8 	ldr	r0, [pc, #216]	; 710 <audio_read_rarc_ASM+0x18>
     634:	e5901000 	ldr	r1, [r0]
     638:	e3811008 	orr	r1, r1, #8
     63c:	e5801000 	str	r1, [r0]
     640:	e12fff1e 	bx	lr

00000644 <audio_disable_read_fifo_clear_ASM>:
     644:	e59f00c4 	ldr	r0, [pc, #196]	; 710 <audio_read_rarc_ASM+0x18>
     648:	e5901000 	ldr	r1, [r0]
     64c:	e3c11004 	bic	r1, r1, #4
     650:	e5801000 	str	r1, [r0]
     654:	e12fff1e 	bx	lr

00000658 <audio_disable_write_fifo_clear_ASM>:
     658:	e59f00b0 	ldr	r0, [pc, #176]	; 710 <audio_read_rarc_ASM+0x18>
     65c:	e5901000 	ldr	r1, [r0]
     660:	e3c11008 	bic	r1, r1, #8
     664:	e5801000 	str	r1, [r0]
     668:	e12fff1e 	bx	lr

0000066c <audio_enable_read_int_ASM>:
     66c:	e59f009c 	ldr	r0, [pc, #156]	; 710 <audio_read_rarc_ASM+0x18>
     670:	e5901000 	ldr	r1, [r0]
     674:	e3811001 	orr	r1, r1, #1
     678:	e5801000 	str	r1, [r0]
     67c:	e12fff1e 	bx	lr

00000680 <audio_enable_write_int_ASM>:
     680:	e59f0088 	ldr	r0, [pc, #136]	; 710 <audio_read_rarc_ASM+0x18>
     684:	e5901000 	ldr	r1, [r0]
     688:	e3811002 	orr	r1, r1, #2
     68c:	e5801000 	str	r1, [r0]
     690:	e12fff1e 	bx	lr

00000694 <audio_disable_read_int_ASM>:
     694:	e59f0074 	ldr	r0, [pc, #116]	; 710 <audio_read_rarc_ASM+0x18>
     698:	e5901000 	ldr	r1, [r0]
     69c:	e3c11001 	bic	r1, r1, #1
     6a0:	e5801000 	str	r1, [r0]
     6a4:	e12fff1e 	bx	lr

000006a8 <audio_disable_write_int_ASM>:
     6a8:	e59f0060 	ldr	r0, [pc, #96]	; 710 <audio_read_rarc_ASM+0x18>
     6ac:	e5901000 	ldr	r1, [r0]
     6b0:	e3c11002 	bic	r1, r1, #2
     6b4:	e5801000 	str	r1, [r0]
     6b8:	e12fff1e 	bx	lr

000006bc <audio_read_wslc_ASM>:
     6bc:	e59f0050 	ldr	r0, [pc, #80]	; 714 <audio_read_rarc_ASM+0x1c>
     6c0:	e5900000 	ldr	r0, [r0]
     6c4:	e1a00c20 	lsr	r0, r0, #24
     6c8:	e20000ff 	and	r0, r0, #255	; 0xff
     6cc:	e12fff1e 	bx	lr

000006d0 <audio_read_wsrc_ASM>:
     6d0:	e59f003c 	ldr	r0, [pc, #60]	; 714 <audio_read_rarc_ASM+0x1c>
     6d4:	e5900000 	ldr	r0, [r0]
     6d8:	e1a00820 	lsr	r0, r0, #16
     6dc:	e20000ff 	and	r0, r0, #255	; 0xff
     6e0:	e12fff1e 	bx	lr

000006e4 <audio_read_ralc_ASM>:
     6e4:	e59f0028 	ldr	r0, [pc, #40]	; 714 <audio_read_rarc_ASM+0x1c>
     6e8:	e5900000 	ldr	r0, [r0]
     6ec:	e1a00420 	lsr	r0, r0, #8
     6f0:	e20000ff 	and	r0, r0, #255	; 0xff
     6f4:	e12fff1e 	bx	lr

000006f8 <audio_read_rarc_ASM>:
     6f8:	e59f0014 	ldr	r0, [pc, #20]	; 714 <audio_read_rarc_ASM+0x1c>
     6fc:	e5900000 	ldr	r0, [r0]
     700:	e20000ff 	and	r0, r0, #255	; 0xff
     704:	e12fff1e 	bx	lr
     708:	ff203048 	.word	0xff203048
     70c:	ff20304c 	.word	0xff20304c
     710:	ff203040 	.word	0xff203040
     714:	ff203044 	.word	0xff203044

00000718 <read_ps2_data_ASM>:
     718:	e59f114c 	ldr	r1, [pc, #332]	; 86c <ps2_fifo_ravail+0x4>
     71c:	e5911000 	ldr	r1, [r1]
     720:	e3a02902 	mov	r2, #32768	; 0x8000
     724:	e1110002 	tst	r1, r2
     728:	03a00000 	moveq	r0, #0
     72c:	012fff1e 	bxeq	lr
     730:	e20120ff 	and	r2, r1, #255	; 0xff
     734:	e5c02000 	strb	r2, [r0]
     738:	e59f2130 	ldr	r2, [pc, #304]	; 870 <ps2_fifo_ravail+0x8>
     73c:	e0010002 	and	r0, r1, r2
     740:	e1a00820 	lsr	r0, r0, #16
     744:	e12fff1e 	bx	lr

00000748 <enable_ps2_int_ASM>:
     748:	e59f011c 	ldr	r0, [pc, #284]	; 86c <ps2_fifo_ravail+0x4>
     74c:	e3a01001 	mov	r1, #1
     750:	e5c01004 	strb	r1, [r0, #4]
     754:	e12fff1e 	bx	lr

00000758 <disable_ps2_int_ASM>:
     758:	e59f010c 	ldr	r0, [pc, #268]	; 86c <ps2_fifo_ravail+0x4>
     75c:	e3a01000 	mov	r1, #0
     760:	e5c01004 	strb	r1, [r0, #4]
     764:	e12fff1e 	bx	lr

00000768 <ps2_fifo_data>:
	...

00000868 <ps2_fifo_ravail>:
     868:	00000000 	.word	0x00000000
     86c:	ff200100 	.word	0xff200100
     870:	ffff0000 	.word	0xffff0000

00000874 <read_PB_data_ASM>:
     874:	e59f1074 	ldr	r1, [pc, #116]	; 8f0 <disable_PB_INT_ASM+0x14>
     878:	e5910000 	ldr	r0, [r1]
     87c:	e12fff1e 	bx	lr

00000880 <PB_data_is_pressed_ASM>:
     880:	e59f1068 	ldr	r1, [pc, #104]	; 8f0 <disable_PB_INT_ASM+0x14>
     884:	e5912000 	ldr	r2, [r1]
     888:	e0000002 	and	r0, r0, r2
     88c:	e3300000 	teq	r0, #0
     890:	13a00001 	movne	r0, #1
     894:	e12fff1e 	bx	lr

00000898 <read_PB_edgecap_ASM>:
     898:	e59f1054 	ldr	r1, [pc, #84]	; 8f4 <disable_PB_INT_ASM+0x18>
     89c:	e5910000 	ldr	r0, [r1]
     8a0:	e12fff1e 	bx	lr

000008a4 <PB_edgecap_is_pressed_ASM>:
     8a4:	e59f1048 	ldr	r1, [pc, #72]	; 8f4 <disable_PB_INT_ASM+0x18>
     8a8:	e5912000 	ldr	r2, [r1]
     8ac:	e0000002 	and	r0, r0, r2
     8b0:	e3300000 	teq	r0, #0
     8b4:	13a00001 	movne	r0, #1
     8b8:	e12fff1e 	bx	lr

000008bc <PB_clear_edgecp_ASM>:
     8bc:	e59f1030 	ldr	r1, [pc, #48]	; 8f4 <disable_PB_INT_ASM+0x18>
     8c0:	e5810000 	str	r0, [r1]
     8c4:	e12fff1e 	bx	lr

000008c8 <enable_PB_INT_ASM>:
     8c8:	e59f1028 	ldr	r1, [pc, #40]	; 8f8 <disable_PB_INT_ASM+0x1c>
     8cc:	e5912000 	ldr	r2, [r1]
     8d0:	e1800002 	orr	r0, r0, r2
     8d4:	e5810000 	str	r0, [r1]
     8d8:	e12fff1e 	bx	lr

000008dc <disable_PB_INT_ASM>:
     8dc:	e59f1014 	ldr	r1, [pc, #20]	; 8f8 <disable_PB_INT_ASM+0x1c>
     8e0:	e5912000 	ldr	r2, [r1]
     8e4:	e1c00002 	bic	r0, r0, r2
     8e8:	e5810000 	str	r0, [r1]
     8ec:	e12fff1e 	bx	lr
     8f0:	ff200050 	.word	0xff200050
     8f4:	ff20005c 	.word	0xff20005c
     8f8:	ff200058 	.word	0xff200058

000008fc <read_slider_switches_ASM>:
     8fc:	e59f1004 	ldr	r1, [pc, #4]	; 908 <read_slider_switches_ASM+0xc>
     900:	e5910000 	ldr	r0, [r1]
     904:	e12fff1e 	bx	lr
     908:	ff200040 	.word	0xff200040

0000090c <VGA_clear_charbuff_ASM>:
     90c:	e92d0030 	push	{r4, r5}
     910:	e3a02000 	mov	r2, #0
     914:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
     918:	e3a00000 	mov	r0, #0

0000091c <CHAR_LOOPX>:
     91c:	e3a01000 	mov	r1, #0
     920:	e0834000 	add	r4, r3, r0

00000924 <CHAR_LOOPY>:
     924:	e0845381 	add	r5, r4, r1, lsl #7
     928:	e5c52000 	strb	r2, [r5]
     92c:	e2811001 	add	r1, r1, #1
     930:	e351003c 	cmp	r1, #60	; 0x3c
     934:	bafffffa 	blt	924 <CHAR_LOOPY>
     938:	e2800001 	add	r0, r0, #1
     93c:	e3500050 	cmp	r0, #80	; 0x50
     940:	bafffff5 	blt	91c <CHAR_LOOPX>
     944:	e8bd0030 	pop	{r4, r5}
     948:	e12fff1e 	bx	lr

0000094c <VGA_clear_pixelbuff_ASM>:
     94c:	e92d0030 	push	{r4, r5}
     950:	e3a02000 	mov	r2, #0
     954:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
     958:	e3a00000 	mov	r0, #0

0000095c <PIXEL_LOOPX>:
     95c:	e3a01000 	mov	r1, #0
     960:	e0834080 	add	r4, r3, r0, lsl #1

00000964 <PIXEL_LOOPY>:
     964:	e0845501 	add	r5, r4, r1, lsl #10
     968:	e1c520b0 	strh	r2, [r5]
     96c:	e2811001 	add	r1, r1, #1
     970:	e35100f0 	cmp	r1, #240	; 0xf0
     974:	bafffffa 	blt	964 <PIXEL_LOOPY>
     978:	e2800001 	add	r0, r0, #1
     97c:	e3500d05 	cmp	r0, #320	; 0x140
     980:	bafffff5 	blt	95c <PIXEL_LOOPX>
     984:	e8bd0030 	pop	{r4, r5}
     988:	e12fff1e 	bx	lr

0000098c <VGA_write_char_ASM>:
     98c:	e3500000 	cmp	r0, #0
     990:	b12fff1e 	bxlt	lr
     994:	e3510000 	cmp	r1, #0
     998:	b12fff1e 	bxlt	lr
     99c:	e350004f 	cmp	r0, #79	; 0x4f
     9a0:	c12fff1e 	bxgt	lr
     9a4:	e351003b 	cmp	r1, #59	; 0x3b
     9a8:	c12fff1e 	bxgt	lr
     9ac:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
     9b0:	e0833000 	add	r3, r3, r0
     9b4:	e0833381 	add	r3, r3, r1, lsl #7
     9b8:	e5c32000 	strb	r2, [r3]
     9bc:	e12fff1e 	bx	lr

000009c0 <VGA_write_byte_ASM>:
     9c0:	e3500000 	cmp	r0, #0
     9c4:	b12fff1e 	bxlt	lr
     9c8:	e3510000 	cmp	r1, #0
     9cc:	b12fff1e 	bxlt	lr
     9d0:	e350004e 	cmp	r0, #78	; 0x4e
     9d4:	c12fff1e 	bxgt	lr
     9d8:	e351003b 	cmp	r1, #59	; 0x3b
     9dc:	c12fff1e 	bxgt	lr
     9e0:	e92d0030 	push	{r4, r5}
     9e4:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
     9e8:	e20250f0 	and	r5, r2, #240	; 0xf0
     9ec:	e1a05225 	lsr	r5, r5, #4
     9f0:	e202400f 	and	r4, r2, #15
     9f4:	e59f2068 	ldr	r2, [pc, #104]	; a64 <HEX_ASCII+0x10>
     9f8:	e7d25005 	ldrb	r5, [r2, r5]
     9fc:	e7d24004 	ldrb	r4, [r2, r4]
     a00:	e0833000 	add	r3, r3, r0
     a04:	e0833381 	add	r3, r3, r1, lsl #7
     a08:	e5c35000 	strb	r5, [r3]
     a0c:	e2833001 	add	r3, r3, #1
     a10:	e5c34000 	strb	r4, [r3]
     a14:	e8bd0030 	pop	{r4, r5}
     a18:	e12fff1e 	bx	lr

00000a1c <VGA_draw_point_ASM>:
     a1c:	e59f3044 	ldr	r3, [pc, #68]	; a68 <HEX_ASCII+0x14>
     a20:	e3500000 	cmp	r0, #0
     a24:	b12fff1e 	bxlt	lr
     a28:	e3510000 	cmp	r1, #0
     a2c:	b12fff1e 	bxlt	lr
     a30:	e1500003 	cmp	r0, r3
     a34:	c12fff1e 	bxgt	lr
     a38:	e35100ef 	cmp	r1, #239	; 0xef
     a3c:	c12fff1e 	bxgt	lr
     a40:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
     a44:	e0833080 	add	r3, r3, r0, lsl #1
     a48:	e0833501 	add	r3, r3, r1, lsl #10
     a4c:	e1c320b0 	strh	r2, [r3]
     a50:	e12fff1e 	bx	lr

00000a54 <HEX_ASCII>:
     a54:	33323130 	.word	0x33323130
     a58:	37363534 	.word	0x37363534
     a5c:	42413938 	.word	0x42413938
     a60:	46454443 	.word	0x46454443
     a64:	00000a54 	.word	0x00000a54
     a68:	0000013f 	.word	0x0000013f

00000a6c <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
     a6c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a70:	e28db000 	add	r11, sp, #0
     a74:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     a78:	e3a030d3 	mov	r3, #211	; 0xd3
     a7c:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     a80:	e51b3008 	ldr	r3, [r11, #-8]
     a84:	e129f003 	msr	CPSR_fc, r3
}
     a88:	e28bd000 	add	sp, r11, #0
     a8c:	e8bd0800 	ldmfd	sp!, {r11}
     a90:	e12fff1e 	bx	lr

00000a94 <enable_A9_interrupts>:

void enable_A9_interrupts() {
     a94:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a98:	e28db000 	add	r11, sp, #0
     a9c:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
     aa0:	e3a03053 	mov	r3, #83	; 0x53
     aa4:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     aa8:	e51b3008 	ldr	r3, [r11, #-8]
     aac:	e129f003 	msr	CPSR_fc, r3
}
     ab0:	e28bd000 	add	sp, r11, #0
     ab4:	e8bd0800 	ldmfd	sp!, {r11}
     ab8:	e12fff1e 	bx	lr

00000abc <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
     abc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ac0:	e28db000 	add	r11, sp, #0
     ac4:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
     ac8:	e3e03007 	mvn	r3, #7
     acc:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
     ad0:	e3a030d2 	mov	r3, #210	; 0xd2
     ad4:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     ad8:	e51b300c 	ldr	r3, [r11, #-12]
     adc:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     ae0:	e51b3008 	ldr	r3, [r11, #-8]
     ae4:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
     ae8:	e3a030d3 	mov	r3, #211	; 0xd3
     aec:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     af0:	e51b300c 	ldr	r3, [r11, #-12]
     af4:	e129f003 	msr	CPSR_fc, r3
}
     af8:	e28bd000 	add	sp, r11, #0
     afc:	e8bd0800 	ldmfd	sp!, {r11}
     b00:	e12fff1e 	bx	lr

00000b04 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
     b04:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b08:	e28db000 	add	r11, sp, #0
     b0c:	e24dd01c 	sub	sp, sp, #28
     b10:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     b14:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     b18:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     b1c:	e1a031c3 	asr	r3, r3, #3
     b20:	e3c33003 	bic	r3, r3, #3
     b24:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
     b28:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     b2c:	e203301f 	and	r3, r3, #31
     b30:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
     b34:	e3a02001 	mov	r2, #1
     b38:	e51b300c 	ldr	r3, [r11, #-12]
     b3c:	e1a03312 	lsl	r3, r2, r3
     b40:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     b44:	e51b3008 	ldr	r3, [r11, #-8]
     b48:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     b4c:	e2433c03 	sub	r3, r3, #768	; 0x300
     b50:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
     b54:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     b58:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     b5c:	e5921000 	ldr	r1, [r2]
     b60:	e51b2010 	ldr	r2, [r11, #-16]
     b64:	e1812002 	orr	r2, r1, r2
     b68:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
     b6c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     b70:	e3c33003 	bic	r3, r3, #3
     b74:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
     b78:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     b7c:	e2033003 	and	r3, r3, #3
     b80:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     b84:	e51b2008 	ldr	r2, [r11, #-8]
     b88:	e51b300c 	ldr	r3, [r11, #-12]
     b8c:	e0823003 	add	r3, r2, r3
     b90:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     b94:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
     b98:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     b9c:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     ba0:	e6ef2072 	uxtb	r2, r2
     ba4:	e5c32000 	strb	r2, [r3]
}
     ba8:	e28bd000 	add	sp, r11, #0
     bac:	e8bd0800 	ldmfd	sp!, {r11}
     bb0:	e12fff1e 	bx	lr

00000bb4 <config_GIC>:

void config_GIC(int len, int* IDs) {
     bb4:	e92d4800 	push	{r11, lr}
     bb8:	e28db004 	add	r11, sp, #4
     bbc:	e24dd010 	sub	sp, sp, #16
     bc0:	e50b0010 	str	r0, [r11, #-16]
     bc4:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
     bc8:	e3a03000 	mov	r3, #0
     bcc:	e50b3008 	str	r3, [r11, #-8]
     bd0:	ea00000a 	b	c00 <ICDICFR>
		config_interrupt(IDs[i],1);
     bd4:	e51b3008 	ldr	r3, [r11, #-8]
     bd8:	e1a03103 	lsl	r3, r3, #2
     bdc:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     be0:	e0823003 	add	r3, r2, r3
     be4:	e5933000 	ldr	r3, [r3]
     be8:	e1a00003 	mov	r0, r3
     bec:	e3a01001 	mov	r1, #1
     bf0:	ebffffc3 	bl	b04 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     bf4:	e51b3008 	ldr	r3, [r11, #-8]
     bf8:	e2833001 	add	r3, r3, #1
     bfc:	e50b3008 	str	r3, [r11, #-8]
     c00:	e51b2008 	ldr	r2, [r11, #-8]
     c04:	e51b3010 	ldr	r3, [r11, #-16]
     c08:	e1520003 	cmp	r2, r3
     c0c:	bafffff0 	blt	bd4 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     c10:	e30c3104 	movw	r3, #49412	; 0xc104
     c14:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     c18:	e30f2fff 	movw	r2, #65535	; 0xffff
     c1c:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     c20:	e3a03cc1 	mov	r3, #49408	; 0xc100
     c24:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     c28:	e3a02001 	mov	r2, #1
     c2c:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
     c30:	e3a03a0d 	mov	r3, #53248	; 0xd000
     c34:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     c38:	e3a02001 	mov	r2, #1
     c3c:	e5832000 	str	r2, [r3]
}
     c40:	e24bd004 	sub	sp, r11, #4
     c44:	e8bd8800 	pop	{r11, pc}

00000c48 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     c48:	e24ee004 	sub	lr, lr, #4
     c4c:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     c50:	e28db018 	add	r11, sp, #24
     c54:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     c58:	e30c310c 	movw	r3, #49420	; 0xc10c
     c5c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     c60:	e5933000 	ldr	r3, [r3]
     c64:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
     c68:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     c6c:	e3530053 	cmp	r3, #83	; 0x53
     c70:	0a00003d 	beq	d6c <__cs3_isr_irq+0x124>
     c74:	e3530053 	cmp	r3, #83	; 0x53
     c78:	ca000011 	bgt	cc4 <__cs3_isr_irq+0x7c>
     c7c:	e353004e 	cmp	r3, #78	; 0x4e
     c80:	0a000031 	beq	d4c <__cs3_isr_irq+0x104>
     c84:	e353004e 	cmp	r3, #78	; 0x4e
     c88:	ca000006 	bgt	ca8 <__cs3_isr_irq+0x60>
     c8c:	e3530048 	cmp	r3, #72	; 0x48
     c90:	0a000029 	beq	d3c <__cs3_isr_irq+0xf4>
     c94:	e3530049 	cmp	r3, #73	; 0x49
     c98:	0a000029 	beq	d44 <__cs3_isr_irq+0xfc>
     c9c:	e353001d 	cmp	r3, #29
     ca0:	0a000019 	beq	d0c <__cs3_isr_irq+0xc4>
     ca4:	ea000036 	b	d84 <__cs3_isr_irq+0x13c>
     ca8:	e3530050 	cmp	r3, #80	; 0x50
     cac:	0a00002a 	beq	d5c <__cs3_isr_irq+0x114>
     cb0:	e3530050 	cmp	r3, #80	; 0x50
     cb4:	ba000026 	blt	d54 <__cs3_isr_irq+0x10c>
     cb8:	e3530051 	cmp	r3, #81	; 0x51
     cbc:	0a000028 	beq	d64 <__cs3_isr_irq+0x11c>
     cc0:	ea00002f 	b	d84 <__cs3_isr_irq+0x13c>
     cc4:	e35300c7 	cmp	r3, #199	; 0xc7
     cc8:	0a000013 	beq	d1c <__cs3_isr_irq+0xd4>
     ccc:	e35300c7 	cmp	r3, #199	; 0xc7
     cd0:	ca000006 	bgt	cf0 <__cs3_isr_irq+0xa8>
     cd4:	e3530059 	cmp	r3, #89	; 0x59
     cd8:	0a000027 	beq	d7c <__cs3_isr_irq+0x134>
     cdc:	e35300c5 	cmp	r3, #197	; 0xc5
     ce0:	0a00000b 	beq	d14 <__cs3_isr_irq+0xcc>
     ce4:	e3530054 	cmp	r3, #84	; 0x54
     ce8:	0a000021 	beq	d74 <__cs3_isr_irq+0x12c>
     cec:	ea000024 	b	d84 <__cs3_isr_irq+0x13c>
     cf0:	e35300c9 	cmp	r3, #201	; 0xc9
     cf4:	0a00000c 	beq	d2c <__cs3_isr_irq+0xe4>
     cf8:	e35300c9 	cmp	r3, #201	; 0xc9
     cfc:	ba000008 	blt	d24 <__cs3_isr_irq+0xdc>
     d00:	e35300ca 	cmp	r3, #202	; 0xca
     d04:	0a00000a 	beq	d34 <__cs3_isr_irq+0xec>
     d08:	ea00001d 	b	d84 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     d0c:	ebfffdbf 	bl	410 <A9_PRIV_TIM_ISR>
     d10:	ea00001c 	b	d88 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
     d14:	ebfffdbe 	bl	414 <HPS_GPIO1_ISR>
     d18:	ea00001a 	b	d88 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
     d1c:	ebfffdbd 	bl	418 <HPS_TIM0_ISR>
     d20:	ea000018 	b	d88 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
     d24:	ebfffdc3 	bl	438 <HPS_TIM1_ISR>
     d28:	ea000016 	b	d88 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
     d2c:	ebfffdc2 	bl	43c <HPS_TIM2_ISR>
     d30:	ea000014 	b	d88 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
     d34:	ebfffdc1 	bl	440 <HPS_TIM3_ISR>
     d38:	ea000012 	b	d88 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     d3c:	ebfffdc0 	bl	444 <FPGA_INTERVAL_TIM_ISR>
     d40:	ea000010 	b	d88 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     d44:	ebfffdbf 	bl	448 <FPGA_PB_KEYS_ISR>
     d48:	ea00000e 	b	d88 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
     d4c:	ebfffdbe 	bl	44c <FPGA_Audio_ISR>
     d50:	ea00000c 	b	d88 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
     d54:	ebfffdbd 	bl	450 <FPGA_PS2_ISR>
     d58:	ea00000a 	b	d88 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
     d5c:	ebfffdbc 	bl	454 <FPGA_JTAG_ISR>
     d60:	ea000008 	b	d88 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
     d64:	ebfffdbb 	bl	458 <FPGA_IrDA_ISR>
     d68:	ea000006 	b	d88 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
     d6c:	ebfffdba 	bl	45c <FPGA_JP1_ISR>
     d70:	ea000004 	b	d88 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
     d74:	ebfffdb9 	bl	460 <FPGA_JP2_ISR>
     d78:	ea000002 	b	d88 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     d7c:	ebfffdb8 	bl	464 <FPGA_PS2_DUAL_ISR>
     d80:	ea000000 	b	d88 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
     d84:	eafffffe 	b	d84 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     d88:	e30c3110 	movw	r3, #49424	; 0xc110
     d8c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     d90:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     d94:	e5832000 	str	r2, [r3]
}
     d98:	e24bd018 	sub	sp, r11, #24
     d9c:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000da0 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
     da0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     da4:	e28db000 	add	r11, sp, #0
	while(1);
     da8:	eafffffe 	b	da8 <__cs3_reset+0x8>

00000dac <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     dac:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     db0:	e28db000 	add	r11, sp, #0
	while(1);
     db4:	eafffffe 	b	db4 <__cs3_isr_undef+0x8>

00000db8 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
     db8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     dbc:	e28db000 	add	r11, sp, #0
	while(1);
     dc0:	eafffffe 	b	dc0 <__cs3_isr_swi+0x8>

00000dc4 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
     dc4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     dc8:	e28db000 	add	r11, sp, #0
	while(1);
     dcc:	eafffffe 	b	dcc <__cs3_isr_pabort+0x8>

00000dd0 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
     dd0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     dd4:	e28db000 	add	r11, sp, #0
	while(1);
     dd8:	eafffffe 	b	dd8 <__cs3_isr_dabort+0x8>

00000ddc <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
     ddc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     de0:	e28db000 	add	r11, sp, #0
	while(1);
     de4:	eafffffe 	b	de4 <__cs3_isr_fiq+0x8>

00000de8 <fix_bug>:
}

void fix_bug() {
     de8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     dec:	e28db000 	add	r11, sp, #0
     df0:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
     df4:	e30d3198 	movw	r3, #53656	; 0xd198
     df8:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     dfc:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
     e00:	e51b3008 	ldr	r3, [r11, #-8]
     e04:	e3a02703 	mov	r2, #786432	; 0xc0000
     e08:	e5832000 	str	r2, [r3]
}
     e0c:	e28bd000 	add	sp, r11, #0
     e10:	e8bd0800 	ldmfd	sp!, {r11}
     e14:	e12fff1e 	bx	lr

00000e18 <int_setup>:

void int_setup(int len, int* IDs) {
     e18:	e92d4800 	push	{r11, lr}
     e1c:	e28db004 	add	r11, sp, #4
     e20:	e24dd008 	sub	sp, sp, #8
     e24:	e50b0008 	str	r0, [r11, #-8]
     e28:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
     e2c:	ebffff0e 	bl	a6c <disable_A9_interrupts>
	set_A9_IRQ_stack();
     e30:	ebffff21 	bl	abc <set_A9_IRQ_stack>
	fix_bug();
     e34:	ebffffeb 	bl	de8 <fix_bug>
	config_GIC(len, IDs);
     e38:	e51b0008 	ldr	r0, [r11, #-8]
     e3c:	e51b100c 	ldr	r1, [r11, #-12]
     e40:	ebffff5b 	bl	bb4 <config_GIC>
	enable_A9_interrupts();
     e44:	ebffff12 	bl	a94 <enable_A9_interrupts>
}
     e48:	e24bd004 	sub	sp, r11, #4
     e4c:	e8bd8800 	pop	{r11, pc}

00000e50 <displayNotesPlayed>:
//a char array that displays the notes played 
char displayNotes[8] = {};
//array holding the frequencies, index matched to the keys pressed
float frequencies[] = {130.813, 146.832, 164.814, 174.614, 195.998, 220.000, 246.942, 261.626};

void displayNotesPlayed(int xPos, char notes){
     e50:	e92d4800 	push	{r11, lr}
     e54:	e28db004 	add	r11, sp, #4
     e58:	e24dd010 	sub	sp, sp, #16
     e5c:	e50b0010 	str	r0, [r11, #-16]
     e60:	e1a03001 	mov	r3, r1
     e64:	e54b3011 	strb	r3, [r11, #-17]	; 0xffffffef
	int i = 0;
     e68:	e3a03000 	mov	r3, #0
     e6c:	e50b3008 	str	r3, [r11, #-8]
	VGA_write_char_ASM(xPos,59,notes);
     e70:	e55b3011 	ldrb	r3, [r11, #-17]	; 0xffffffef
     e74:	e51b0010 	ldr	r0, [r11, #-16]
     e78:	e3a0103b 	mov	r1, #59	; 0x3b
     e7c:	e1a02003 	mov	r2, r3
     e80:	ebfffec1 	bl	98c <VGA_write_char_ASM>
}
     e84:	e24bd004 	sub	sp, r11, #4
     e88:	e8bd8800 	pop	{r11, pc}

00000e8c <getSample>:
// Get the sample based on the frequency and the "index"
// Returns double: signal
double getSample(float freq, int t) {
     e8c:	e92d4830 	push	{r4, r5, r11, lr}
     e90:	e28db00c 	add	r11, sp, #12
     e94:	e24dd018 	sub	sp, sp, #24
     e98:	e50b0020 	str	r0, [r11, #-32]	; 0xffffffe0
     e9c:	e50b1024 	str	r1, [r11, #-36]	; 0xffffffdc
	double signal = 0.0;
     ea0:	e3a02000 	mov	r2, #0
     ea4:	e3a03000 	mov	r3, #0
     ea8:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec
	int index = ((int)freq*t)%48000;
     eac:	e51b0020 	ldr	r0, [r11, #-32]	; 0xffffffe0
     eb0:	eb000660 	bl	2838 <__aeabi_f2iz>
     eb4:	e1a03000 	mov	r3, r0
     eb8:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
     ebc:	e0030392 	mul	r3, r2, r3
     ec0:	e30129f1 	movw	r2, #6641	; 0x19f1
     ec4:	e3402576 	movt	r2, #1398	; 0x576
     ec8:	e0c21392 	smull	r1, r2, r2, r3
     ecc:	e1a01542 	asr	r1, r2, #10
     ed0:	e1a02fc3 	asr	r2, r3, #31
     ed4:	e0622001 	rsb	r2, r2, r1
     ed8:	e30b1b80 	movw	r1, #48000	; 0xbb80
     edc:	e0020291 	mul	r2, r1, r2
     ee0:	e0623003 	rsb	r3, r2, r3
     ee4:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	float difference  = (freq*t)-index;
     ee8:	e51b0024 	ldr	r0, [r11, #-36]	; 0xffffffdc
     eec:	eb000517 	bl	2350 <__aeabi_i2f>
     ef0:	e1a03000 	mov	r3, r0
     ef4:	e1a00003 	mov	r0, r3
     ef8:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
     efc:	eb00054a 	bl	242c <__aeabi_fmul>
     f00:	e1a03000 	mov	r3, r0
     f04:	e1a04003 	mov	r4, r3
     f08:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     f0c:	eb00050f 	bl	2350 <__aeabi_i2f>
     f10:	e1a03000 	mov	r3, r0
     f14:	e1a00004 	mov	r0, r4
     f18:	e1a01003 	mov	r1, r3
     f1c:	eb000499 	bl	2188 <__aeabi_fsub>
     f20:	e1a03000 	mov	r3, r0
     f24:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	if(difference = 0){
     f28:	e3a03000 	mov	r3, #0
     f2c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
     f30:	e51b001c 	ldr	r0, [r11, #-28]	; 0xffffffe4
     f34:	e3a01000 	mov	r1, #0
     f38:	eb000620 	bl	27c0 <__aeabi_fcmpeq>
     f3c:	e1a03000 	mov	r3, r0
     f40:	e3530000 	cmp	r3, #0
     f44:	1a000009 	bne	f70 <getSample+0xe4>
		signal = sine[index];
     f48:	e3023e48 	movw	r3, #11848	; 0x2e48
     f4c:	e3403000 	movt	r3, #0
     f50:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     f54:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     f58:	e1a00003 	mov	r0, r3
     f5c:	eb000312 	bl	1bac <__aeabi_i2d>
     f60:	e1a02000 	mov	r2, r0
     f64:	e1a03001 	mov	r3, r1
     f68:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec
     f6c:	ea000030 	b	1034 <getSample+0x1a8>
	}else{
		signal = (1.0 - difference) * sine[index] + difference * sine[index + 1]; 
     f70:	e51b001c 	ldr	r0, [r11, #-28]	; 0xffffffe4
     f74:	eb000316 	bl	1bd4 <__aeabi_f2d>
     f78:	e1a02000 	mov	r2, r0
     f7c:	e1a03001 	mov	r3, r1
     f80:	e3a00000 	mov	r0, #0
     f84:	e3a01000 	mov	r1, #0
     f88:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     f8c:	eb000238 	bl	1874 <__aeabi_dsub>
     f90:	e1a02000 	mov	r2, r0
     f94:	e1a03001 	mov	r3, r1
     f98:	e1a04002 	mov	r4, r2
     f9c:	e1a05003 	mov	r5, r3
     fa0:	e3023e48 	movw	r3, #11848	; 0x2e48
     fa4:	e3403000 	movt	r3, #0
     fa8:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     fac:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     fb0:	e1a00003 	mov	r0, r3
     fb4:	eb0002fc 	bl	1bac <__aeabi_i2d>
     fb8:	e1a02000 	mov	r2, r0
     fbc:	e1a03001 	mov	r3, r1
     fc0:	e1a00004 	mov	r0, r4
     fc4:	e1a01005 	mov	r1, r5
     fc8:	eb00032e 	bl	1c88 <__aeabi_dmul>
     fcc:	e1a02000 	mov	r2, r0
     fd0:	e1a03001 	mov	r3, r1
     fd4:	e1a04002 	mov	r4, r2
     fd8:	e1a05003 	mov	r5, r3
     fdc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     fe0:	e2832001 	add	r2, r3, #1
     fe4:	e3023e48 	movw	r3, #11848	; 0x2e48
     fe8:	e3403000 	movt	r3, #0
     fec:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     ff0:	e1a00003 	mov	r0, r3
     ff4:	eb0004d5 	bl	2350 <__aeabi_i2f>
     ff8:	e1a03000 	mov	r3, r0
     ffc:	e1a00003 	mov	r0, r3
    1000:	e51b101c 	ldr	r1, [r11, #-28]	; 0xffffffe4
    1004:	eb000508 	bl	242c <__aeabi_fmul>
    1008:	e1a03000 	mov	r3, r0
    100c:	e1a00003 	mov	r0, r3
    1010:	eb0002ef 	bl	1bd4 <__aeabi_f2d>
    1014:	e1a02000 	mov	r2, r0
    1018:	e1a03001 	mov	r3, r1
    101c:	e1a00004 	mov	r0, r4
    1020:	e1a01005 	mov	r1, r5
    1024:	eb000213 	bl	1878 <__adddf3>
    1028:	e1a02000 	mov	r2, r0
    102c:	e1a03001 	mov	r3, r1
    1030:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec
	}
	return signal;
    1034:	e14b21d4 	ldrd	r2, [r11, #-20]	; 0xffffffec
}
    1038:	e1a00002 	mov	r0, r2
    103c:	e1a01003 	mov	r1, r3
    1040:	e24bd00c 	sub	sp, r11, #12
    1044:	e8bd8830 	pop	{r4, r5, r11, pc}

00001048 <makeSignal>:

//This generates the signal from the samples
double makeSignal(int* notePlayed, int t){
    1048:	e92d4800 	push	{r11, lr}
    104c:	e28db004 	add	r11, sp, #4
    1050:	e24dd018 	sub	sp, sp, #24
    1054:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    1058:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int i;
	double sumOfSamples = 0.0;
    105c:	e3a02000 	mov	r2, #0
    1060:	e3a03000 	mov	r3, #0
    1064:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec
	
	//cycle through the notes the user entered
	for(i = 0;i<8;i++){
    1068:	e3a03000 	mov	r3, #0
    106c:	e50b3008 	str	r3, [r11, #-8]
    1070:	ea000017 	b	10d4 <makeSignal+0x8c>
		//check if user entered a note, if so, add it
		if(notePlayed[i] == 1){
    1074:	e51b3008 	ldr	r3, [r11, #-8]
    1078:	e1a03103 	lsl	r3, r3, #2
    107c:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1080:	e0823003 	add	r3, r2, r3
    1084:	e5933000 	ldr	r3, [r3]
    1088:	e3530001 	cmp	r3, #1
    108c:	1a00000d 	bne	10c8 <makeSignal+0x80>
			sumOfSamples += getSample(frequencies[i],t);
    1090:	e3013c4c 	movw	r3, #7244	; 0x1c4c
    1094:	e3403003 	movt	r3, #3
    1098:	e51b2008 	ldr	r2, [r11, #-8]
    109c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
    10a0:	e1a00003 	mov	r0, r3
    10a4:	e51b101c 	ldr	r1, [r11, #-28]	; 0xffffffe4
    10a8:	ebffff77 	bl	e8c <getSample>
    10ac:	e1a02000 	mov	r2, r0
    10b0:	e1a03001 	mov	r3, r1
    10b4:	e14b01d4 	ldrd	r0, [r11, #-20]	; 0xffffffec
    10b8:	eb0001ee 	bl	1878 <__adddf3>
    10bc:	e1a02000 	mov	r2, r0
    10c0:	e1a03001 	mov	r3, r1
    10c4:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec
double makeSignal(int* notePlayed, int t){
	int i;
	double sumOfSamples = 0.0;
	
	//cycle through the notes the user entered
	for(i = 0;i<8;i++){
    10c8:	e51b3008 	ldr	r3, [r11, #-8]
    10cc:	e2833001 	add	r3, r3, #1
    10d0:	e50b3008 	str	r3, [r11, #-8]
    10d4:	e51b3008 	ldr	r3, [r11, #-8]
    10d8:	e3530007 	cmp	r3, #7
    10dc:	daffffe4 	ble	1074 <makeSignal+0x2c>
		//check if user entered a note, if so, add it
		if(notePlayed[i] == 1){
			sumOfSamples += getSample(frequencies[i],t);
		}
	}
	return sumOfSamples;
    10e0:	e14b21d4 	ldrd	r2, [r11, #-20]	; 0xffffffec
}
    10e4:	e1a00002 	mov	r0, r2
    10e8:	e1a01003 	mov	r1, r3
    10ec:	e24bd004 	sub	sp, r11, #4
    10f0:	e8bd8800 	pop	{r11, pc}

000010f4 <drawWords>:

void drawWords(){
    10f4:	e92d4800 	push	{r11, lr}
    10f8:	e28db004 	add	r11, sp, #4

	VGA_write_char_ASM(70, 59, 'V');
    10fc:	e3a00046 	mov	r0, #70	; 0x46
    1100:	e3a0103b 	mov	r1, #59	; 0x3b
    1104:	e3a02056 	mov	r2, #86	; 0x56
    1108:	ebfffe1f 	bl	98c <VGA_write_char_ASM>
	VGA_write_char_ASM(71, 59, 'O');
    110c:	e3a00047 	mov	r0, #71	; 0x47
    1110:	e3a0103b 	mov	r1, #59	; 0x3b
    1114:	e3a0204f 	mov	r2, #79	; 0x4f
    1118:	ebfffe1b 	bl	98c <VGA_write_char_ASM>
	VGA_write_char_ASM(72, 59, 'L');
    111c:	e3a00048 	mov	r0, #72	; 0x48
    1120:	e3a0103b 	mov	r1, #59	; 0x3b
    1124:	e3a0204c 	mov	r2, #76	; 0x4c
    1128:	ebfffe17 	bl	98c <VGA_write_char_ASM>
	VGA_write_char_ASM(73, 59, 'U');
    112c:	e3a00049 	mov	r0, #73	; 0x49
    1130:	e3a0103b 	mov	r1, #59	; 0x3b
    1134:	e3a02055 	mov	r2, #85	; 0x55
    1138:	ebfffe13 	bl	98c <VGA_write_char_ASM>
	VGA_write_char_ASM(74, 59, 'M');
    113c:	e3a0004a 	mov	r0, #74	; 0x4a
    1140:	e3a0103b 	mov	r1, #59	; 0x3b
    1144:	e3a0204d 	mov	r2, #77	; 0x4d
    1148:	ebfffe0f 	bl	98c <VGA_write_char_ASM>
	VGA_write_char_ASM(75, 59, 'E');
    114c:	e3a0004b 	mov	r0, #75	; 0x4b
    1150:	e3a0103b 	mov	r1, #59	; 0x3b
    1154:	e3a02045 	mov	r2, #69	; 0x45
    1158:	ebfffe0b 	bl	98c <VGA_write_char_ASM>
	VGA_write_char_ASM(76, 59, ':');
    115c:	e3a0004c 	mov	r0, #76	; 0x4c
    1160:	e3a0103b 	mov	r1, #59	; 0x3b
    1164:	e3a0203a 	mov	r2, #58	; 0x3a
    1168:	ebfffe07 	bl	98c <VGA_write_char_ASM>

}
    116c:	e8bd8800 	pop	{r11, pc}

00001170 <main>:
int x;
int main() {
    1170:	e92d4810 	push	{r4, r11, lr}
    1174:	e28db008 	add	r11, sp, #8
    1178:	e24ddea5 	sub	sp, sp, #2640	; 0xa50
    117c:	e24dd004 	sub	sp, sp, #4
	// Setup timer
	VGA_clear_pixelbuff_ASM();
    1180:	ebfffdf1 	bl	94c <VGA_clear_pixelbuff_ASM>
	int_setup(1, (int []){199});
    1184:	e3a030c7 	mov	r3, #199	; 0xc7
    1188:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
    118c:	e24b3038 	sub	r3, r11, #56	; 0x38
    1190:	e3a00001 	mov	r0, #1
    1194:	e1a01003 	mov	r1, r3
    1198:	ebffff1e 	bl	e18 <int_setup>
	HPS_TIM_config_t hps_tim;
	hps_tim.tim = TIM0; //microsecond timer
    119c:	e3a03001 	mov	r3, #1
    11a0:	e54b3050 	strb	r3, [r11, #-80]	; 0xffffffb0
	hps_tim.timeout = 20; //1/48000 = 20.8
    11a4:	e3a03014 	mov	r3, #20
    11a8:	e50b304c 	str	r3, [r11, #-76]	; 0xffffffb4
	hps_tim.LD_en = 1; // initial count value
    11ac:	e3a03001 	mov	r3, #1
    11b0:	e50b3048 	str	r3, [r11, #-72]	; 0xffffffb8
	hps_tim.INT_en = 1; //enabling the interrupt
    11b4:	e3a03001 	mov	r3, #1
    11b8:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc
	hps_tim.enable = 1; //enable bit to 1
    11bc:	e3a03001 	mov	r3, #1
    11c0:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0

	HPS_TIM_config_ASM(&hps_tim);
    11c4:	e24b3050 	sub	r3, r11, #80	; 0x50
    11c8:	e1a00003 	mov	r0, r3
    11cc:	ebfffc44 	bl	2e4 <HPS_TIM_config_ASM>
	
	//These two variables act as flags
	//keyReleased checks if a key is not pressed
	//keyPressed checks if a key is pressed 	
	char keyPressed = 1;
    11d0:	e3a03001 	mov	r3, #1
    11d4:	e54b300d 	strb	r3, [r11, #-13]
	// counter for signal
	int t = 0;
    11d8:	e3a03000 	mov	r3, #0
    11dc:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	// to store the previous set of drawn points for quicker clearing
	double old_wave[320] = { 0 };
    11e0:	e24b3d29 	sub	r3, r11, #2624	; 0xa40
    11e4:	e243300c 	sub	r3, r3, #12
    11e8:	e2433008 	sub	r3, r3, #8
    11ec:	e3a02c0a 	mov	r2, #2560	; 0xa00
    11f0:	e1a00003 	mov	r0, r3
    11f4:	e3a01000 	mov	r1, #0
    11f8:	eb0005ba 	bl	28e8 <memset>
	//double valToDraw = 0;

	char value;

	char amplitude = 1;
    11fc:	e3a03001 	mov	r3, #1
    1200:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
	double signalSum = 0.0;
    1204:	e3a02000 	mov	r2, #0
    1208:	e3a03000 	mov	r3, #0
    120c:	e14b22f4 	strd	r2, [r11, #-36]	; 0xffffffdc
	drawWords();
    1210:	ebffffb7 	bl	10f4 <drawWords>
    1214:	ea000000 	b	121c <main+0xac>
			// Reset the counter
			if(t==48000){
				t=0;
			}
		
	}
    1218:	e1a00000 	nop			; (mov r0, r0)

	char amplitude = 1;
	double signalSum = 0.0;
	drawWords();
	while(1) {
			if(read_slider_switches_ASM()!=0){
    121c:	ebfffdb6 	bl	8fc <read_slider_switches_ASM>
    1220:	e1a03000 	mov	r3, r0
    1224:	e3530000 	cmp	r3, #0
    1228:	0a0000fa 	beq	1618 <main+0x4a8>
				//we check keys
				if(read_ps2_data_ASM(&value)){
    122c:	e24b3d29 	sub	r3, r11, #2624	; 0xa40
    1230:	e243300c 	sub	r3, r3, #12
    1234:	e2433009 	sub	r3, r3, #9
    1238:	e1a00003 	mov	r0, r3
    123c:	ebfffd35 	bl	718 <read_ps2_data_ASM>
    1240:	e1a03000 	mov	r3, r0
    1244:	e3530000 	cmp	r3, #0
    1248:	0a0000f2 	beq	1618 <main+0x4a8>
					switch(value){
    124c:	e55b3a55 	ldrb	r3, [r11, #-2645]	; 0xfffff5ab
    1250:	e353003b 	cmp	r3, #59	; 0x3b
    1254:	0a000079 	beq	1440 <main+0x2d0>
    1258:	e353003b 	cmp	r3, #59	; 0x3b
    125c:	ca00000d 	bgt	1298 <main+0x128>
    1260:	e3530023 	cmp	r3, #35	; 0x23
    1264:	0a000047 	beq	1388 <main+0x218>
    1268:	e3530023 	cmp	r3, #35	; 0x23
    126c:	ca000004 	bgt	1284 <main+0x114>
    1270:	e353001b 	cmp	r3, #27
    1274:	0a00002c 	beq	132c <main+0x1bc>
    1278:	e353001c 	cmp	r3, #28
    127c:	0a000013 	beq	12d0 <main+0x160>
    1280:	ea0000e0 	b	1608 <main+0x498>
    1284:	e353002b 	cmp	r3, #43	; 0x2b
    1288:	0a000055 	beq	13e4 <main+0x274>
    128c:	e353002d 	cmp	r3, #45	; 0x2d
    1290:	0a0000d3 	beq	15e4 <main+0x474>
    1294:	ea0000db 	b	1608 <main+0x498>
    1298:	e353004b 	cmp	r3, #75	; 0x4b
    129c:	0a000095 	beq	14f8 <main+0x388>
    12a0:	e353004b 	cmp	r3, #75	; 0x4b
    12a4:	ca000004 	bgt	12bc <main+0x14c>
    12a8:	e3530042 	cmp	r3, #66	; 0x42
    12ac:	0a00007a 	beq	149c <main+0x32c>
    12b0:	e3530043 	cmp	r3, #67	; 0x43
    12b4:	0a0000c0 	beq	15bc <main+0x44c>
    12b8:	ea0000d2 	b	1608 <main+0x498>
    12bc:	e353004c 	cmp	r3, #76	; 0x4c
    12c0:	0a0000a3 	beq	1554 <main+0x3e4>
    12c4:	e35300f0 	cmp	r3, #240	; 0xf0
    12c8:	0a0000b8 	beq	15b0 <main+0x440>
    12cc:	ea0000cd 	b	1608 <main+0x498>
						case 0x1C:
						if(keyPressed == 1){
    12d0:	e55b300d 	ldrb	r3, [r11, #-13]
    12d4:	e3530001 	cmp	r3, #1
    12d8:	1a000008 	bne	1300 <main+0x190>
							notesPlayed[0] = 1;
    12dc:	e30230c8 	movw	r3, #8392	; 0x20c8
    12e0:	e3403003 	movt	r3, #3
    12e4:	e3a02001 	mov	r2, #1
    12e8:	e5832000 	str	r2, [r3]
							displayNotes[0] = 'C';
    12ec:	e30230e8 	movw	r3, #8424	; 0x20e8
    12f0:	e3403003 	movt	r3, #3
    12f4:	e3a02043 	mov	r2, #67	; 0x43
    12f8:	e5c32000 	strb	r2, [r3]
							//keyPressed = 0; //tester
						}else{
							notesPlayed[0] = 0;
							keyPressed = 1;
							displayNotes[0] = ' ';
						}break;
    12fc:	ea0000c5 	b	1618 <main+0x4a8>
							notesPlayed[0] = 1;
							displayNotes[0] = 'C';
							//colour += 500;
							//keyPressed = 0; //tester
						}else{
							notesPlayed[0] = 0;
    1300:	e30230c8 	movw	r3, #8392	; 0x20c8
    1304:	e3403003 	movt	r3, #3
    1308:	e3a02000 	mov	r2, #0
    130c:	e5832000 	str	r2, [r3]
							keyPressed = 1;
    1310:	e3a03001 	mov	r3, #1
    1314:	e54b300d 	strb	r3, [r11, #-13]
							displayNotes[0] = ' ';
    1318:	e30230e8 	movw	r3, #8424	; 0x20e8
    131c:	e3403003 	movt	r3, #3
    1320:	e3a02020 	mov	r2, #32
    1324:	e5c32000 	strb	r2, [r3]
						}break;
    1328:	ea0000ba 	b	1618 <main+0x4a8>
						case 0x1B:
						if(keyPressed == 1){
    132c:	e55b300d 	ldrb	r3, [r11, #-13]
    1330:	e3530001 	cmp	r3, #1
    1334:	1a000008 	bne	135c <main+0x1ec>
							notesPlayed[1] = 1;
    1338:	e30230c8 	movw	r3, #8392	; 0x20c8
    133c:	e3403003 	movt	r3, #3
    1340:	e3a02001 	mov	r2, #1
    1344:	e5832004 	str	r2, [r3, #4]
							displayNotes[1] = 'D';
    1348:	e30230e8 	movw	r3, #8424	; 0x20e8
    134c:	e3403003 	movt	r3, #3
    1350:	e3a02044 	mov	r2, #68	; 0x44
    1354:	e5c32001 	strb	r2, [r3, #1]
				
						}else{
							notesPlayed[1] = 0;
							keyPressed = 1;
							displayNotes[1] = ' ';
						}break;
    1358:	ea0000ae 	b	1618 <main+0x4a8>
						if(keyPressed == 1){
							notesPlayed[1] = 1;
							displayNotes[1] = 'D';
				
						}else{
							notesPlayed[1] = 0;
    135c:	e30230c8 	movw	r3, #8392	; 0x20c8
    1360:	e3403003 	movt	r3, #3
    1364:	e3a02000 	mov	r2, #0
    1368:	e5832004 	str	r2, [r3, #4]
							keyPressed = 1;
    136c:	e3a03001 	mov	r3, #1
    1370:	e54b300d 	strb	r3, [r11, #-13]
							displayNotes[1] = ' ';
    1374:	e30230e8 	movw	r3, #8424	; 0x20e8
    1378:	e3403003 	movt	r3, #3
    137c:	e3a02020 	mov	r2, #32
    1380:	e5c32001 	strb	r2, [r3, #1]
						}break;
    1384:	ea0000a3 	b	1618 <main+0x4a8>
						case 0x23:
						if(keyPressed == 1){
    1388:	e55b300d 	ldrb	r3, [r11, #-13]
    138c:	e3530001 	cmp	r3, #1
    1390:	1a000008 	bne	13b8 <main+0x248>
							notesPlayed[2] = 1;
    1394:	e30230c8 	movw	r3, #8392	; 0x20c8
    1398:	e3403003 	movt	r3, #3
    139c:	e3a02001 	mov	r2, #1
    13a0:	e5832008 	str	r2, [r3, #8]
							displayNotes[2] = 'E';
    13a4:	e30230e8 	movw	r3, #8424	; 0x20e8
    13a8:	e3403003 	movt	r3, #3
    13ac:	e3a02045 	mov	r2, #69	; 0x45
    13b0:	e5c32002 	strb	r2, [r3, #2]
							
						}else{
							notesPlayed[2] = 0;
							keyPressed = 1;
							displayNotes[2] = ' ';
						}break;
    13b4:	ea000097 	b	1618 <main+0x4a8>
						if(keyPressed == 1){
							notesPlayed[2] = 1;
							displayNotes[2] = 'E';
							
						}else{
							notesPlayed[2] = 0;
    13b8:	e30230c8 	movw	r3, #8392	; 0x20c8
    13bc:	e3403003 	movt	r3, #3
    13c0:	e3a02000 	mov	r2, #0
    13c4:	e5832008 	str	r2, [r3, #8]
							keyPressed = 1;
    13c8:	e3a03001 	mov	r3, #1
    13cc:	e54b300d 	strb	r3, [r11, #-13]
							displayNotes[2] = ' ';
    13d0:	e30230e8 	movw	r3, #8424	; 0x20e8
    13d4:	e3403003 	movt	r3, #3
    13d8:	e3a02020 	mov	r2, #32
    13dc:	e5c32002 	strb	r2, [r3, #2]
						}break;
    13e0:	ea00008c 	b	1618 <main+0x4a8>
						case 0x2B:
						if(keyPressed == 1){
    13e4:	e55b300d 	ldrb	r3, [r11, #-13]
    13e8:	e3530001 	cmp	r3, #1
    13ec:	1a000008 	bne	1414 <main+0x2a4>
							notesPlayed[3] = 1;
    13f0:	e30230c8 	movw	r3, #8392	; 0x20c8
    13f4:	e3403003 	movt	r3, #3
    13f8:	e3a02001 	mov	r2, #1
    13fc:	e583200c 	str	r2, [r3, #12]
							displayNotes[3] = 'F';
    1400:	e30230e8 	movw	r3, #8424	; 0x20e8
    1404:	e3403003 	movt	r3, #3
    1408:	e3a02046 	mov	r2, #70	; 0x46
    140c:	e5c32003 	strb	r2, [r3, #3]
							
						}else{
							notesPlayed[3] = 0;
							keyPressed = 1;
							displayNotes[3] = ' ';
						}break;
    1410:	ea000080 	b	1618 <main+0x4a8>
						if(keyPressed == 1){
							notesPlayed[3] = 1;
							displayNotes[3] = 'F';
							
						}else{
							notesPlayed[3] = 0;
    1414:	e30230c8 	movw	r3, #8392	; 0x20c8
    1418:	e3403003 	movt	r3, #3
    141c:	e3a02000 	mov	r2, #0
    1420:	e583200c 	str	r2, [r3, #12]
							keyPressed = 1;
    1424:	e3a03001 	mov	r3, #1
    1428:	e54b300d 	strb	r3, [r11, #-13]
							displayNotes[3] = ' ';
    142c:	e30230e8 	movw	r3, #8424	; 0x20e8
    1430:	e3403003 	movt	r3, #3
    1434:	e3a02020 	mov	r2, #32
    1438:	e5c32003 	strb	r2, [r3, #3]
						}break;
    143c:	ea000075 	b	1618 <main+0x4a8>
						case 0x3B:
						if(keyPressed == 1){
    1440:	e55b300d 	ldrb	r3, [r11, #-13]
    1444:	e3530001 	cmp	r3, #1
    1448:	1a000008 	bne	1470 <main+0x300>
							notesPlayed[4] = 1;
    144c:	e30230c8 	movw	r3, #8392	; 0x20c8
    1450:	e3403003 	movt	r3, #3
    1454:	e3a02001 	mov	r2, #1
    1458:	e5832010 	str	r2, [r3, #16]
							displayNotes[4] = 'G';
    145c:	e30230e8 	movw	r3, #8424	; 0x20e8
    1460:	e3403003 	movt	r3, #3
    1464:	e3a02047 	mov	r2, #71	; 0x47
    1468:	e5c32004 	strb	r2, [r3, #4]
							
						}else{
							notesPlayed[4] = 0;
							keyPressed = 1;
							displayNotes[4] = ' ';
						}break;
    146c:	ea000069 	b	1618 <main+0x4a8>
						if(keyPressed == 1){
							notesPlayed[4] = 1;
							displayNotes[4] = 'G';
							
						}else{
							notesPlayed[4] = 0;
    1470:	e30230c8 	movw	r3, #8392	; 0x20c8
    1474:	e3403003 	movt	r3, #3
    1478:	e3a02000 	mov	r2, #0
    147c:	e5832010 	str	r2, [r3, #16]
							keyPressed = 1;
    1480:	e3a03001 	mov	r3, #1
    1484:	e54b300d 	strb	r3, [r11, #-13]
							displayNotes[4] = ' ';
    1488:	e30230e8 	movw	r3, #8424	; 0x20e8
    148c:	e3403003 	movt	r3, #3
    1490:	e3a02020 	mov	r2, #32
    1494:	e5c32004 	strb	r2, [r3, #4]
						}break;
    1498:	ea00005e 	b	1618 <main+0x4a8>
						case 0x42:
						if(keyPressed == 1){
    149c:	e55b300d 	ldrb	r3, [r11, #-13]
    14a0:	e3530001 	cmp	r3, #1
    14a4:	1a000008 	bne	14cc <main+0x35c>
							notesPlayed[5] = 1;
    14a8:	e30230c8 	movw	r3, #8392	; 0x20c8
    14ac:	e3403003 	movt	r3, #3
    14b0:	e3a02001 	mov	r2, #1
    14b4:	e5832014 	str	r2, [r3, #20]
							displayNotes[5] = 'A';
    14b8:	e30230e8 	movw	r3, #8424	; 0x20e8
    14bc:	e3403003 	movt	r3, #3
    14c0:	e3a02041 	mov	r2, #65	; 0x41
    14c4:	e5c32005 	strb	r2, [r3, #5]
							
						}else{
							notesPlayed[5] = 0;
							keyPressed = 1;
							displayNotes[5] = ' ';
						}break;
    14c8:	ea000052 	b	1618 <main+0x4a8>
						if(keyPressed == 1){
							notesPlayed[5] = 1;
							displayNotes[5] = 'A';
							
						}else{
							notesPlayed[5] = 0;
    14cc:	e30230c8 	movw	r3, #8392	; 0x20c8
    14d0:	e3403003 	movt	r3, #3
    14d4:	e3a02000 	mov	r2, #0
    14d8:	e5832014 	str	r2, [r3, #20]
							keyPressed = 1;
    14dc:	e3a03001 	mov	r3, #1
    14e0:	e54b300d 	strb	r3, [r11, #-13]
							displayNotes[5] = ' ';
    14e4:	e30230e8 	movw	r3, #8424	; 0x20e8
    14e8:	e3403003 	movt	r3, #3
    14ec:	e3a02020 	mov	r2, #32
    14f0:	e5c32005 	strb	r2, [r3, #5]
						}break;
    14f4:	ea000047 	b	1618 <main+0x4a8>
						case 0x4B:
						if(keyPressed == 1){
    14f8:	e55b300d 	ldrb	r3, [r11, #-13]
    14fc:	e3530001 	cmp	r3, #1
    1500:	1a000008 	bne	1528 <main+0x3b8>
							notesPlayed[6] = 1;
    1504:	e30230c8 	movw	r3, #8392	; 0x20c8
    1508:	e3403003 	movt	r3, #3
    150c:	e3a02001 	mov	r2, #1
    1510:	e5832018 	str	r2, [r3, #24]
							displayNotes[6] = 'B';
    1514:	e30230e8 	movw	r3, #8424	; 0x20e8
    1518:	e3403003 	movt	r3, #3
    151c:	e3a02042 	mov	r2, #66	; 0x42
    1520:	e5c32006 	strb	r2, [r3, #6]
							
						}else{
							notesPlayed[6] = 0;
							keyPressed = 1;
							displayNotes[6] = ' ';
						}break;
    1524:	ea00003b 	b	1618 <main+0x4a8>
						if(keyPressed == 1){
							notesPlayed[6] = 1;
							displayNotes[6] = 'B';
							
						}else{
							notesPlayed[6] = 0;
    1528:	e30230c8 	movw	r3, #8392	; 0x20c8
    152c:	e3403003 	movt	r3, #3
    1530:	e3a02000 	mov	r2, #0
    1534:	e5832018 	str	r2, [r3, #24]
							keyPressed = 1;
    1538:	e3a03001 	mov	r3, #1
    153c:	e54b300d 	strb	r3, [r11, #-13]
							displayNotes[6] = ' ';
    1540:	e30230e8 	movw	r3, #8424	; 0x20e8
    1544:	e3403003 	movt	r3, #3
    1548:	e3a02020 	mov	r2, #32
    154c:	e5c32006 	strb	r2, [r3, #6]
						}break;
    1550:	ea000030 	b	1618 <main+0x4a8>
						case 0x4C:
						if(keyPressed == 1){
    1554:	e55b300d 	ldrb	r3, [r11, #-13]
    1558:	e3530001 	cmp	r3, #1
    155c:	1a000008 	bne	1584 <main+0x414>
							notesPlayed[7] = 1;
    1560:	e30230c8 	movw	r3, #8392	; 0x20c8
    1564:	e3403003 	movt	r3, #3
    1568:	e3a02001 	mov	r2, #1
    156c:	e583201c 	str	r2, [r3, #28]
							displayNotes[7] = 'C';
    1570:	e30230e8 	movw	r3, #8424	; 0x20e8
    1574:	e3403003 	movt	r3, #3
    1578:	e3a02043 	mov	r2, #67	; 0x43
    157c:	e5c32007 	strb	r2, [r3, #7]
							
						}else{
							notesPlayed[7] = 0;
							keyPressed = 1;
							displayNotes[7] = ' ';
						}break;
    1580:	ea000024 	b	1618 <main+0x4a8>
						if(keyPressed == 1){
							notesPlayed[7] = 1;
							displayNotes[7] = 'C';
							
						}else{
							notesPlayed[7] = 0;
    1584:	e30230c8 	movw	r3, #8392	; 0x20c8
    1588:	e3403003 	movt	r3, #3
    158c:	e3a02000 	mov	r2, #0
    1590:	e583201c 	str	r2, [r3, #28]
							keyPressed = 1;
    1594:	e3a03001 	mov	r3, #1
    1598:	e54b300d 	strb	r3, [r11, #-13]
							displayNotes[7] = ' ';
    159c:	e30230e8 	movw	r3, #8424	; 0x20e8
    15a0:	e3403003 	movt	r3, #3
    15a4:	e3a02020 	mov	r2, #32
    15a8:	e5c32007 	strb	r2, [r3, #7]
						}break;
    15ac:	ea000019 	b	1618 <main+0x4a8>
						case 0xF0:
							keyPressed = 0;
    15b0:	e3a03000 	mov	r3, #0
    15b4:	e54b300d 	strb	r3, [r11, #-13]
							break;
    15b8:	ea000016 	b	1618 <main+0x4a8>
						case 0x43: //increase sound with key 'I'
						if(keyPressed ==1){
    15bc:	e55b300d 	ldrb	r3, [r11, #-13]
    15c0:	e3530001 	cmp	r3, #1
    15c4:	1a000012 	bne	1614 <main+0x4a4>
							if(amplitude <10){
    15c8:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
    15cc:	e3530009 	cmp	r3, #9
    15d0:	8a00000f 	bhi	1614 <main+0x4a4>
								amplitude++;
    15d4:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
    15d8:	e2833001 	add	r3, r3, #1
    15dc:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
							}
						}break;
    15e0:	ea00000b 	b	1614 <main+0x4a4>
						case 0x2D: //Decrease sound with key 'R'
						if(keyPressed == 1){
    15e4:	e55b300d 	ldrb	r3, [r11, #-13]
    15e8:	e3530001 	cmp	r3, #1
    15ec:	1a000005 	bne	1608 <main+0x498>
							if(amplitude !=0){
    15f0:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
    15f4:	e3530000 	cmp	r3, #0
    15f8:	0a000002 	beq	1608 <main+0x498>
								amplitude--;
    15fc:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
    1600:	e2433001 	sub	r3, r3, #1
    1604:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
							}
						}
						default:
							keyPressed = 0;
    1608:	e3a03000 	mov	r3, #0
    160c:	e54b300d 	strb	r3, [r11, #-13]
    1610:	ea000000 	b	1618 <main+0x4a8>
						case 0x43: //increase sound with key 'I'
						if(keyPressed ==1){
							if(amplitude <10){
								amplitude++;
							}
						}break;
    1614:	e1a00000 	nop			; (mov r0, r0)
						default:
							keyPressed = 0;
					}
				}
			}
			signalSum = makeSignal(notesPlayed, t); //generate the signal at this t based on what keys were pressed
    1618:	e30200c8 	movw	r0, #8392	; 0x20c8
    161c:	e3400003 	movt	r0, #3
    1620:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
    1624:	ebfffe87 	bl	1048 <makeSignal>
    1628:	e14b02f4 	strd	r0, [r11, #-36]	; 0xffffffdc

			signalSum = amplitude * signalSum; //this is volume control
    162c:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
    1630:	e1a00003 	mov	r0, r3
    1634:	eb00015c 	bl	1bac <__aeabi_i2d>
    1638:	e1a02000 	mov	r2, r0
    163c:	e1a03001 	mov	r3, r1
    1640:	e14b02d4 	ldrd	r0, [r11, #-36]	; 0xffffffdc
    1644:	eb00018f 	bl	1c88 <__aeabi_dmul>
    1648:	e1a02000 	mov	r2, r0
    164c:	e1a03001 	mov	r3, r1
    1650:	e14b22f4 	strd	r2, [r11, #-36]	; 0xffffffdc

			// Every 20 microseconds this flag goes high
			if(hps_tim0_int_flag == 1) {
    1654:	e300340c 	movw	r3, #1036	; 0x40c
    1658:	e3403000 	movt	r3, #0
    165c:	e5933000 	ldr	r3, [r3]
    1660:	e3530001 	cmp	r3, #1
    1664:	1a00000f 	bne	16a8 <main+0x538>
				hps_tim0_int_flag = 0;
    1668:	e300340c 	movw	r3, #1036	; 0x40c
    166c:	e3403000 	movt	r3, #0
    1670:	e3a02000 	mov	r2, #0
    1674:	e5832000 	str	r2, [r3]
				audio_write_data_ASM(signalSum, signalSum);
    1678:	e14b02d4 	ldrd	r0, [r11, #-36]	; 0xffffffdc
    167c:	eb0002a8 	bl	2124 <__aeabi_d2iz>
    1680:	e1a04000 	mov	r4, r0
    1684:	e14b02d4 	ldrd	r0, [r11, #-36]	; 0xffffffdc
    1688:	eb0002a5 	bl	2124 <__aeabi_d2iz>
    168c:	e1a03000 	mov	r3, r0
    1690:	e1a00004 	mov	r0, r4
    1694:	e1a01003 	mov	r1, r3
    1698:	ebfffbad 	bl	554 <audio_write_data_ASM>
				t++;
    169c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    16a0:	e2833001 	add	r3, r3, #1
    16a4:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
			}

			int drawIndex = 0;
    16a8:	e3a03000 	mov	r3, #0
    16ac:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
			double valToDraw = 0;
    16b0:	e3a02000 	mov	r2, #0
    16b4:	e3a03000 	mov	r3, #0
    16b8:	e14b23f4 	strd	r2, [r11, #-52]	; 0xffffffcc
			// To reduce the number of drawing operations
			if((t%10 == 0)){
    16bc:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
    16c0:	e3063667 	movw	r3, #26215	; 0x6667
    16c4:	e3463666 	movt	r3, #26214	; 0x6666
    16c8:	e0c32193 	smull	r2, r3, r3, r1
    16cc:	e1a02143 	asr	r2, r3, #2
    16d0:	e1a03fc1 	asr	r3, r1, #31
    16d4:	e0632002 	rsb	r2, r3, r2
    16d8:	e1a03002 	mov	r3, r2
    16dc:	e1a03103 	lsl	r3, r3, #2
    16e0:	e0833002 	add	r3, r3, r2
    16e4:	e1a03083 	lsl	r3, r3, #1
    16e8:	e0632001 	rsb	r2, r3, r1
    16ec:	e3520000 	cmp	r2, #0
    16f0:	1a000053 	bne	1844 <main+0x6d4>
				//draw volume number in bottom right
				if(amplitude == 10){
    16f4:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
    16f8:	e353000a 	cmp	r3, #10
    16fc:	1a000004 	bne	1714 <main+0x5a4>
					VGA_write_byte_ASM(78, 59, 16);
    1700:	e3a0004e 	mov	r0, #78	; 0x4e
    1704:	e3a0103b 	mov	r1, #59	; 0x3b
    1708:	e3a02010 	mov	r2, #16
    170c:	ebfffcab 	bl	9c0 <VGA_write_byte_ASM>
    1710:	ea000004 	b	1728 <main+0x5b8>
				} else {
					//volume = 0-9
					VGA_write_byte_ASM(78, 59, amplitude);
    1714:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
    1718:	e3a0004e 	mov	r0, #78	; 0x4e
    171c:	e3a0103b 	mov	r1, #59	; 0x3b
    1720:	e1a02003 	mov	r2, r3
    1724:	ebfffca5 	bl	9c0 <VGA_write_byte_ASM>
				}

				drawIndex = (t/10)%320;
    1728:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    172c:	e3063667 	movw	r3, #26215	; 0x6667
    1730:	e3463666 	movt	r3, #26214	; 0x6666
    1734:	e0c31293 	smull	r1, r3, r3, r2
    1738:	e1a01143 	asr	r1, r3, #2
    173c:	e1a03fc2 	asr	r3, r2, #31
    1740:	e0632001 	rsb	r2, r3, r1
    1744:	e3063667 	movw	r3, #26215	; 0x6667
    1748:	e3463666 	movt	r3, #26214	; 0x6666
    174c:	e0c31293 	smull	r1, r3, r3, r2
    1750:	e1a013c3 	asr	r1, r3, #7
    1754:	e1a03fc2 	asr	r3, r2, #31
    1758:	e0631001 	rsb	r1, r3, r1
    175c:	e1a03001 	mov	r3, r1
    1760:	e1a03103 	lsl	r3, r3, #2
    1764:	e0833001 	add	r3, r3, r1
    1768:	e1a03303 	lsl	r3, r3, #6
    176c:	e0633002 	rsb	r3, r3, r2
    1770:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
				//clear drawn points
				VGA_draw_point_ASM(drawIndex, old_wave[drawIndex], 0);
    1774:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    1778:	e30f35b8 	movw	r3, #62904	; 0xf5b8
    177c:	e34f3fff 	movt	r3, #65535	; 0xffff
    1780:	e1a02182 	lsl	r2, r2, #3
    1784:	e24b100c 	sub	r1, r11, #12
    1788:	e0812002 	add	r2, r1, r2
    178c:	e0823003 	add	r3, r2, r3
    1790:	e1c320d0 	ldrd	r2, [r3]
    1794:	e1a00002 	mov	r0, r2
    1798:	e1a01003 	mov	r1, r3
    179c:	eb000260 	bl	2124 <__aeabi_d2iz>
    17a0:	e1a03000 	mov	r3, r0
    17a4:	e51b0028 	ldr	r0, [r11, #-40]	; 0xffffffd8
    17a8:	e1a01003 	mov	r1, r3
    17ac:	e3a02000 	mov	r2, #0
    17b0:	ebfffc99 	bl	a1c <VGA_draw_point_ASM>
				//120 centers the signal on the screen, 500000 is abitrary to make it fit
				valToDraw = 120 + signalSum/500000;
    17b4:	e14b02d4 	ldrd	r0, [r11, #-36]	; 0xffffffdc
    17b8:	e3a02000 	mov	r2, #0
    17bc:	e3083480 	movw	r3, #33920	; 0x8480
    17c0:	e344311e 	movt	r3, #16670	; 0x411e
    17c4:	eb0001d3 	bl	1f18 <__aeabi_ddiv>
    17c8:	e1a02000 	mov	r2, r0
    17cc:	e1a03001 	mov	r3, r1
    17d0:	e1a00002 	mov	r0, r2
    17d4:	e1a01003 	mov	r1, r3
    17d8:	e3a02000 	mov	r2, #0
    17dc:	e3a03000 	mov	r3, #0
    17e0:	e344305e 	movt	r3, #16478	; 0x405e
    17e4:	eb000023 	bl	1878 <__adddf3>
    17e8:	e1a02000 	mov	r2, r0
    17ec:	e1a03001 	mov	r3, r1
    17f0:	e14b23f4 	strd	r2, [r11, #-52]	; 0xffffffcc
				//add new points to history array
				old_wave[drawIndex] = valToDraw;
    17f4:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    17f8:	e30f35b8 	movw	r3, #62904	; 0xf5b8
    17fc:	e34f3fff 	movt	r3, #65535	; 0xffff
    1800:	e1a02182 	lsl	r2, r2, #3
    1804:	e24b100c 	sub	r1, r11, #12
    1808:	e0812002 	add	r2, r1, r2
    180c:	e0821003 	add	r1, r2, r3
    1810:	e14b23d4 	ldrd	r2, [r11, #-52]	; 0xffffffcc
    1814:	e1c120f0 	strd	r2, [r1]
				//draw new points
				VGA_draw_point_ASM(drawIndex, valToDraw, colour);
    1818:	e14b03d4 	ldrd	r0, [r11, #-52]	; 0xffffffcc
    181c:	eb000240 	bl	2124 <__aeabi_d2iz>
    1820:	e1a02000 	mov	r2, r0
    1824:	e3013c48 	movw	r3, #7240	; 0x1c48
    1828:	e3403003 	movt	r3, #3
    182c:	e1d330b0 	ldrh	r3, [r3]
    1830:	e6bf3073 	sxth	r3, r3
    1834:	e51b0028 	ldr	r0, [r11, #-40]	; 0xffffffd8
    1838:	e1a01002 	mov	r1, r2
    183c:	e1a02003 	mov	r2, r3
    1840:	ebfffc75 	bl	a1c <VGA_draw_point_ASM>
			}
			
			// Reset the signal
			signalSum = 0;
    1844:	e3a02000 	mov	r2, #0
    1848:	e3a03000 	mov	r3, #0
    184c:	e14b22f4 	strd	r2, [r11, #-36]	; 0xffffffdc
			// Reset the counter
			if(t==48000){
    1850:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    1854:	e30b3b80 	movw	r3, #48000	; 0xbb80
    1858:	e1520003 	cmp	r2, r3
    185c:	1afffe6d 	bne	1218 <main+0xa8>
				t=0;
    1860:	e3a03000 	mov	r3, #0
    1864:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
			}
		
	}
    1868:	eafffe6a 	b	1218 <main+0xa8>

0000186c <__aeabi_drsub>:
    186c:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    1870:	ea000000 	b	1878 <__adddf3>

00001874 <__aeabi_dsub>:
    1874:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00001878 <__adddf3>:
    1878:	e92d4030 	push	{r4, r5, lr}
    187c:	e1a04081 	lsl	r4, r1, #1
    1880:	e1a05083 	lsl	r5, r3, #1
    1884:	e1340005 	teq	r4, r5
    1888:	01300002 	teqeq	r0, r2
    188c:	1194c000 	orrsne	r12, r4, r0
    1890:	1195c002 	orrsne	r12, r5, r2
    1894:	11f0cac4 	mvnsne	r12, r4, asr #21
    1898:	11f0cac5 	mvnsne	r12, r5, asr #21
    189c:	0a00008c 	beq	1ad4 <__adddf3+0x25c>
    18a0:	e1a04aa4 	lsr	r4, r4, #21
    18a4:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    18a8:	b2655000 	rsblt	r5, r5, #0
    18ac:	da000006 	ble	18cc <__adddf3+0x54>
    18b0:	e0844005 	add	r4, r4, r5
    18b4:	e0202002 	eor	r2, r0, r2
    18b8:	e0213003 	eor	r3, r1, r3
    18bc:	e0220000 	eor	r0, r2, r0
    18c0:	e0231001 	eor	r1, r3, r1
    18c4:	e0202002 	eor	r2, r0, r2
    18c8:	e0213003 	eor	r3, r1, r3
    18cc:	e3550036 	cmp	r5, #54	; 0x36
    18d0:	88bd4030 	pophi	{r4, r5, lr}
    18d4:	812fff1e 	bxhi	lr
    18d8:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    18dc:	e1a01601 	lsl	r1, r1, #12
    18e0:	e3a0c601 	mov	r12, #1048576	; 0x100000
    18e4:	e18c1621 	orr	r1, r12, r1, lsr #12
    18e8:	0a000001 	beq	18f4 <__adddf3+0x7c>
    18ec:	e2700000 	rsbs	r0, r0, #0
    18f0:	e2e11000 	rsc	r1, r1, #0
    18f4:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    18f8:	e1a03603 	lsl	r3, r3, #12
    18fc:	e18c3623 	orr	r3, r12, r3, lsr #12
    1900:	0a000001 	beq	190c <__adddf3+0x94>
    1904:	e2722000 	rsbs	r2, r2, #0
    1908:	e2e33000 	rsc	r3, r3, #0
    190c:	e1340005 	teq	r4, r5
    1910:	0a000069 	beq	1abc <__adddf3+0x244>
    1914:	e2444001 	sub	r4, r4, #1
    1918:	e275e020 	rsbs	lr, r5, #32
    191c:	ba000005 	blt	1938 <__adddf3+0xc0>
    1920:	e1a0ce12 	lsl	r12, r2, lr
    1924:	e0900532 	adds	r0, r0, r2, lsr r5
    1928:	e2a11000 	adc	r1, r1, #0
    192c:	e0900e13 	adds	r0, r0, r3, lsl lr
    1930:	e0b11553 	adcs	r1, r1, r3, asr r5
    1934:	ea000006 	b	1954 <__adddf3+0xdc>
    1938:	e2455020 	sub	r5, r5, #32
    193c:	e28ee020 	add	lr, lr, #32
    1940:	e3520001 	cmp	r2, #1
    1944:	e1a0ce13 	lsl	r12, r3, lr
    1948:	238cc002 	orrcs	r12, r12, #2
    194c:	e0900553 	adds	r0, r0, r3, asr r5
    1950:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    1954:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1958:	5a000002 	bpl	1968 <__adddf3+0xf0>
    195c:	e27cc000 	rsbs	r12, r12, #0
    1960:	e2f00000 	rscs	r0, r0, #0
    1964:	e2e11000 	rsc	r1, r1, #0
    1968:	e3510601 	cmp	r1, #1048576	; 0x100000
    196c:	3a00000f 	bcc	19b0 <__adddf3+0x138>
    1970:	e3510602 	cmp	r1, #2097152	; 0x200000
    1974:	3a000006 	bcc	1994 <__adddf3+0x11c>
    1978:	e1b010a1 	lsrs	r1, r1, #1
    197c:	e1b00060 	rrxs	r0, r0
    1980:	e1a0c06c 	rrx	r12, r12
    1984:	e2844001 	add	r4, r4, #1
    1988:	e1a02a84 	lsl	r2, r4, #21
    198c:	e3720501 	cmn	r2, #4194304	; 0x400000
    1990:	2a00006b 	bcs	1b44 <__adddf3+0x2cc>
    1994:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    1998:	01b0c0a0 	lsrseq	r12, r0, #1
    199c:	e2b00000 	adcs	r0, r0, #0
    19a0:	e0a11a04 	adc	r1, r1, r4, lsl #20
    19a4:	e1811005 	orr	r1, r1, r5
    19a8:	e8bd4030 	pop	{r4, r5, lr}
    19ac:	e12fff1e 	bx	lr
    19b0:	e1b0c08c 	lsls	r12, r12, #1
    19b4:	e0b00000 	adcs	r0, r0, r0
    19b8:	e0a11001 	adc	r1, r1, r1
    19bc:	e3110601 	tst	r1, #1048576	; 0x100000
    19c0:	e2444001 	sub	r4, r4, #1
    19c4:	1afffff2 	bne	1994 <__adddf3+0x11c>
    19c8:	e3310000 	teq	r1, #0
    19cc:	13a03014 	movne	r3, #20
    19d0:	03a03034 	moveq	r3, #52	; 0x34
    19d4:	01a01000 	moveq	r1, r0
    19d8:	03a00000 	moveq	r0, #0
    19dc:	e1a02001 	mov	r2, r1
    19e0:	e3520801 	cmp	r2, #65536	; 0x10000
    19e4:	21a02822 	lsrcs	r2, r2, #16
    19e8:	22433010 	subcs	r3, r3, #16
    19ec:	e3520c01 	cmp	r2, #256	; 0x100
    19f0:	21a02422 	lsrcs	r2, r2, #8
    19f4:	22433008 	subcs	r3, r3, #8
    19f8:	e3520010 	cmp	r2, #16
    19fc:	21a02222 	lsrcs	r2, r2, #4
    1a00:	22433004 	subcs	r3, r3, #4
    1a04:	e3520004 	cmp	r2, #4
    1a08:	22433002 	subcs	r3, r3, #2
    1a0c:	304330a2 	subcc	r3, r3, r2, lsr #1
    1a10:	e04331a2 	sub	r3, r3, r2, lsr #3
    1a14:	e2532020 	subs	r2, r3, #32
    1a18:	aa000007 	bge	1a3c <__adddf3+0x1c4>
    1a1c:	e292200c 	adds	r2, r2, #12
    1a20:	da000004 	ble	1a38 <__adddf3+0x1c0>
    1a24:	e282c014 	add	r12, r2, #20
    1a28:	e262200c 	rsb	r2, r2, #12
    1a2c:	e1a00c11 	lsl	r0, r1, r12
    1a30:	e1a01231 	lsr	r1, r1, r2
    1a34:	ea000004 	b	1a4c <__adddf3+0x1d4>
    1a38:	e2822014 	add	r2, r2, #20
    1a3c:	d262c020 	rsble	r12, r2, #32
    1a40:	e1a01211 	lsl	r1, r1, r2
    1a44:	d1811c30 	orrle	r1, r1, r0, lsr r12
    1a48:	d1a00210 	lslle	r0, r0, r2
    1a4c:	e0544003 	subs	r4, r4, r3
    1a50:	a0811a04 	addge	r1, r1, r4, lsl #20
    1a54:	a1811005 	orrge	r1, r1, r5
    1a58:	a8bd4030 	popge	{r4, r5, lr}
    1a5c:	a12fff1e 	bxge	lr
    1a60:	e1e04004 	mvn	r4, r4
    1a64:	e254401f 	subs	r4, r4, #31
    1a68:	aa00000f 	bge	1aac <__adddf3+0x234>
    1a6c:	e294400c 	adds	r4, r4, #12
    1a70:	ca000006 	bgt	1a90 <__adddf3+0x218>
    1a74:	e2844014 	add	r4, r4, #20
    1a78:	e2642020 	rsb	r2, r4, #32
    1a7c:	e1a00430 	lsr	r0, r0, r4
    1a80:	e1800211 	orr	r0, r0, r1, lsl r2
    1a84:	e1851431 	orr	r1, r5, r1, lsr r4
    1a88:	e8bd4030 	pop	{r4, r5, lr}
    1a8c:	e12fff1e 	bx	lr
    1a90:	e264400c 	rsb	r4, r4, #12
    1a94:	e2642020 	rsb	r2, r4, #32
    1a98:	e1a00230 	lsr	r0, r0, r2
    1a9c:	e1800411 	orr	r0, r0, r1, lsl r4
    1aa0:	e1a01005 	mov	r1, r5
    1aa4:	e8bd4030 	pop	{r4, r5, lr}
    1aa8:	e12fff1e 	bx	lr
    1aac:	e1a00431 	lsr	r0, r1, r4
    1ab0:	e1a01005 	mov	r1, r5
    1ab4:	e8bd4030 	pop	{r4, r5, lr}
    1ab8:	e12fff1e 	bx	lr
    1abc:	e3340000 	teq	r4, #0
    1ac0:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    1ac4:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    1ac8:	02844001 	addeq	r4, r4, #1
    1acc:	12455001 	subne	r5, r5, #1
    1ad0:	eaffff8f 	b	1914 <__adddf3+0x9c>
    1ad4:	e1f0cac4 	mvns	r12, r4, asr #21
    1ad8:	11f0cac5 	mvnsne	r12, r5, asr #21
    1adc:	0a00001d 	beq	1b58 <__adddf3+0x2e0>
    1ae0:	e1340005 	teq	r4, r5
    1ae4:	01300002 	teqeq	r0, r2
    1ae8:	0a000004 	beq	1b00 <__adddf3+0x288>
    1aec:	e194c000 	orrs	r12, r4, r0
    1af0:	01a01003 	moveq	r1, r3
    1af4:	01a00002 	moveq	r0, r2
    1af8:	e8bd4030 	pop	{r4, r5, lr}
    1afc:	e12fff1e 	bx	lr
    1b00:	e1310003 	teq	r1, r3
    1b04:	13a01000 	movne	r1, #0
    1b08:	13a00000 	movne	r0, #0
    1b0c:	18bd4030 	popne	{r4, r5, lr}
    1b10:	112fff1e 	bxne	lr
    1b14:	e1b0caa4 	lsrs	r12, r4, #21
    1b18:	1a000004 	bne	1b30 <__adddf3+0x2b8>
    1b1c:	e1b00080 	lsls	r0, r0, #1
    1b20:	e0b11001 	adcs	r1, r1, r1
    1b24:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    1b28:	e8bd4030 	pop	{r4, r5, lr}
    1b2c:	e12fff1e 	bx	lr
    1b30:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    1b34:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    1b38:	38bd4030 	popcc	{r4, r5, lr}
    1b3c:	312fff1e 	bxcc	lr
    1b40:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1b44:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    1b48:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1b4c:	e3a00000 	mov	r0, #0
    1b50:	e8bd4030 	pop	{r4, r5, lr}
    1b54:	e12fff1e 	bx	lr
    1b58:	e1f0cac4 	mvns	r12, r4, asr #21
    1b5c:	11a01003 	movne	r1, r3
    1b60:	11a00002 	movne	r0, r2
    1b64:	01f0cac5 	mvnseq	r12, r5, asr #21
    1b68:	11a03001 	movne	r3, r1
    1b6c:	11a02000 	movne	r2, r0
    1b70:	e1904601 	orrs	r4, r0, r1, lsl #12
    1b74:	01925603 	orrseq	r5, r2, r3, lsl #12
    1b78:	01310003 	teqeq	r1, r3
    1b7c:	13811702 	orrne	r1, r1, #524288	; 0x80000
    1b80:	e8bd4030 	pop	{r4, r5, lr}
    1b84:	e12fff1e 	bx	lr

00001b88 <__aeabi_ui2d>:
    1b88:	e3300000 	teq	r0, #0
    1b8c:	03a01000 	moveq	r1, #0
    1b90:	012fff1e 	bxeq	lr
    1b94:	e92d4030 	push	{r4, r5, lr}
    1b98:	e3a04b01 	mov	r4, #1024	; 0x400
    1b9c:	e2844032 	add	r4, r4, #50	; 0x32
    1ba0:	e3a05000 	mov	r5, #0
    1ba4:	e3a01000 	mov	r1, #0
    1ba8:	eaffff86 	b	19c8 <__adddf3+0x150>

00001bac <__aeabi_i2d>:
    1bac:	e3300000 	teq	r0, #0
    1bb0:	03a01000 	moveq	r1, #0
    1bb4:	012fff1e 	bxeq	lr
    1bb8:	e92d4030 	push	{r4, r5, lr}
    1bbc:	e3a04b01 	mov	r4, #1024	; 0x400
    1bc0:	e2844032 	add	r4, r4, #50	; 0x32
    1bc4:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    1bc8:	42600000 	rsbmi	r0, r0, #0
    1bcc:	e3a01000 	mov	r1, #0
    1bd0:	eaffff7c 	b	19c8 <__adddf3+0x150>

00001bd4 <__aeabi_f2d>:
    1bd4:	e1b02080 	lsls	r2, r0, #1
    1bd8:	e1a011c2 	asr	r1, r2, #3
    1bdc:	e1a01061 	rrx	r1, r1
    1be0:	e1a00e02 	lsl	r0, r2, #28
    1be4:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    1be8:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1bec:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    1bf0:	112fff1e 	bxne	lr
    1bf4:	e3320000 	teq	r2, #0
    1bf8:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1bfc:	012fff1e 	bxeq	lr
    1c00:	e92d4030 	push	{r4, r5, lr}
    1c04:	e3a04d0e 	mov	r4, #896	; 0x380
    1c08:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1c0c:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1c10:	eaffff6c 	b	19c8 <__adddf3+0x150>

00001c14 <__aeabi_ul2d>:
    1c14:	e1902001 	orrs	r2, r0, r1
    1c18:	012fff1e 	bxeq	lr
    1c1c:	e92d4030 	push	{r4, r5, lr}
    1c20:	e3a05000 	mov	r5, #0
    1c24:	ea000006 	b	1c44 <__aeabi_l2d+0x1c>

00001c28 <__aeabi_l2d>:
    1c28:	e1902001 	orrs	r2, r0, r1
    1c2c:	012fff1e 	bxeq	lr
    1c30:	e92d4030 	push	{r4, r5, lr}
    1c34:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    1c38:	5a000001 	bpl	1c44 <__aeabi_l2d+0x1c>
    1c3c:	e2700000 	rsbs	r0, r0, #0
    1c40:	e2e11000 	rsc	r1, r1, #0
    1c44:	e3a04b01 	mov	r4, #1024	; 0x400
    1c48:	e2844032 	add	r4, r4, #50	; 0x32
    1c4c:	e1b0cb21 	lsrs	r12, r1, #22
    1c50:	0affff44 	beq	1968 <__adddf3+0xf0>
    1c54:	e3a02003 	mov	r2, #3
    1c58:	e1b0c1ac 	lsrs	r12, r12, #3
    1c5c:	12822003 	addne	r2, r2, #3
    1c60:	e1b0c1ac 	lsrs	r12, r12, #3
    1c64:	12822003 	addne	r2, r2, #3
    1c68:	e08221ac 	add	r2, r2, r12, lsr #3
    1c6c:	e2623020 	rsb	r3, r2, #32
    1c70:	e1a0c310 	lsl	r12, r0, r3
    1c74:	e1a00230 	lsr	r0, r0, r2
    1c78:	e1800311 	orr	r0, r0, r1, lsl r3
    1c7c:	e1a01231 	lsr	r1, r1, r2
    1c80:	e0844002 	add	r4, r4, r2
    1c84:	eaffff37 	b	1968 <__adddf3+0xf0>

00001c88 <__aeabi_dmul>:
    1c88:	e92d4070 	push	{r4, r5, r6, lr}
    1c8c:	e3a0c0ff 	mov	r12, #255	; 0xff
    1c90:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1c94:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1c98:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1c9c:	1134000c 	teqne	r4, r12
    1ca0:	1135000c 	teqne	r5, r12
    1ca4:	0b000075 	bleq	1e80 <__aeabi_dmul+0x1f8>
    1ca8:	e0844005 	add	r4, r4, r5
    1cac:	e0216003 	eor	r6, r1, r3
    1cb0:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    1cb4:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    1cb8:	e1905601 	orrs	r5, r0, r1, lsl #12
    1cbc:	11925603 	orrsne	r5, r2, r3, lsl #12
    1cc0:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1cc4:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    1cc8:	0a00001d 	beq	1d44 <__aeabi_dmul+0xbc>
    1ccc:	e08ec290 	umull	r12, lr, r0, r2
    1cd0:	e3a05000 	mov	r5, #0
    1cd4:	e0a5e291 	umlal	lr, r5, r1, r2
    1cd8:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    1cdc:	e0a5e390 	umlal	lr, r5, r0, r3
    1ce0:	e3a06000 	mov	r6, #0
    1ce4:	e0a65391 	umlal	r5, r6, r1, r3
    1ce8:	e33c0000 	teq	r12, #0
    1cec:	138ee001 	orrne	lr, lr, #1
    1cf0:	e24440ff 	sub	r4, r4, #255	; 0xff
    1cf4:	e3560c02 	cmp	r6, #512	; 0x200
    1cf8:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    1cfc:	2a000002 	bcs	1d0c <__aeabi_dmul+0x84>
    1d00:	e1b0e08e 	lsls	lr, lr, #1
    1d04:	e0b55005 	adcs	r5, r5, r5
    1d08:	e0a66006 	adc	r6, r6, r6
    1d0c:	e1821586 	orr	r1, r2, r6, lsl #11
    1d10:	e1811aa5 	orr	r1, r1, r5, lsr #21
    1d14:	e1a00585 	lsl	r0, r5, #11
    1d18:	e1800aae 	orr	r0, r0, lr, lsr #21
    1d1c:	e1a0e58e 	lsl	lr, lr, #11
    1d20:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1d24:	835c0c07 	cmphi	r12, #1792	; 0x700
    1d28:	8a000011 	bhi	1d74 <__aeabi_dmul+0xec>
    1d2c:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    1d30:	01b0e0a0 	lsrseq	lr, r0, #1
    1d34:	e2b00000 	adcs	r0, r0, #0
    1d38:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1d3c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1d40:	e12fff1e 	bx	lr
    1d44:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    1d48:	e1861001 	orr	r1, r6, r1
    1d4c:	e1800002 	orr	r0, r0, r2
    1d50:	e0211003 	eor	r1, r1, r3
    1d54:	e05440ac 	subs	r4, r4, r12, lsr #1
    1d58:	c074500c 	rsbsgt	r5, r4, r12
    1d5c:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1d60:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1d64:	c12fff1e 	bxgt	lr
    1d68:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1d6c:	e3a0e000 	mov	lr, #0
    1d70:	e2544001 	subs	r4, r4, #1
    1d74:	ca00005d 	bgt	1ef0 <__aeabi_dmul+0x268>
    1d78:	e3740036 	cmn	r4, #54	; 0x36
    1d7c:	d3a00000 	movle	r0, #0
    1d80:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    1d84:	d8bd4070 	pople	{r4, r5, r6, lr}
    1d88:	d12fff1e 	bxle	lr
    1d8c:	e2644000 	rsb	r4, r4, #0
    1d90:	e2544020 	subs	r4, r4, #32
    1d94:	aa00001a 	bge	1e04 <__aeabi_dmul+0x17c>
    1d98:	e294400c 	adds	r4, r4, #12
    1d9c:	ca00000c 	bgt	1dd4 <__aeabi_dmul+0x14c>
    1da0:	e2844014 	add	r4, r4, #20
    1da4:	e2645020 	rsb	r5, r4, #32
    1da8:	e1a03510 	lsl	r3, r0, r5
    1dac:	e1a00430 	lsr	r0, r0, r4
    1db0:	e1800511 	orr	r0, r0, r1, lsl r5
    1db4:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    1db8:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1dbc:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1dc0:	e0a21431 	adc	r1, r2, r1, lsr r4
    1dc4:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1dc8:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1dcc:	e8bd4070 	pop	{r4, r5, r6, lr}
    1dd0:	e12fff1e 	bx	lr
    1dd4:	e264400c 	rsb	r4, r4, #12
    1dd8:	e2645020 	rsb	r5, r4, #32
    1ddc:	e1a03410 	lsl	r3, r0, r4
    1de0:	e1a00530 	lsr	r0, r0, r5
    1de4:	e1800411 	orr	r0, r0, r1, lsl r4
    1de8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1dec:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1df0:	e2a11000 	adc	r1, r1, #0
    1df4:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1df8:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1dfc:	e8bd4070 	pop	{r4, r5, r6, lr}
    1e00:	e12fff1e 	bx	lr
    1e04:	e2645020 	rsb	r5, r4, #32
    1e08:	e18ee510 	orr	lr, lr, r0, lsl r5
    1e0c:	e1a03430 	lsr	r3, r0, r4
    1e10:	e1833511 	orr	r3, r3, r1, lsl r5
    1e14:	e1a00431 	lsr	r0, r1, r4
    1e18:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1e1c:	e1c00431 	bic	r0, r0, r1, lsr r4
    1e20:	e0800fa3 	add	r0, r0, r3, lsr #31
    1e24:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1e28:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1e2c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1e30:	e12fff1e 	bx	lr
    1e34:	e3340000 	teq	r4, #0
    1e38:	1a000008 	bne	1e60 <__aeabi_dmul+0x1d8>
    1e3c:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    1e40:	e1b00080 	lsls	r0, r0, #1
    1e44:	e0a11001 	adc	r1, r1, r1
    1e48:	e3110601 	tst	r1, #1048576	; 0x100000
    1e4c:	02444001 	subeq	r4, r4, #1
    1e50:	0afffffa 	beq	1e40 <__aeabi_dmul+0x1b8>
    1e54:	e1811006 	orr	r1, r1, r6
    1e58:	e3350000 	teq	r5, #0
    1e5c:	112fff1e 	bxne	lr
    1e60:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    1e64:	e1b02082 	lsls	r2, r2, #1
    1e68:	e0a33003 	adc	r3, r3, r3
    1e6c:	e3130601 	tst	r3, #1048576	; 0x100000
    1e70:	02455001 	subeq	r5, r5, #1
    1e74:	0afffffa 	beq	1e64 <__aeabi_dmul+0x1dc>
    1e78:	e1833006 	orr	r3, r3, r6
    1e7c:	e12fff1e 	bx	lr
    1e80:	e134000c 	teq	r4, r12
    1e84:	e00c5a23 	and	r5, r12, r3, lsr #20
    1e88:	1135000c 	teqne	r5, r12
    1e8c:	0a000007 	beq	1eb0 <__aeabi_dmul+0x228>
    1e90:	e1906081 	orrs	r6, r0, r1, lsl #1
    1e94:	11926083 	orrsne	r6, r2, r3, lsl #1
    1e98:	1affffe5 	bne	1e34 <__aeabi_dmul+0x1ac>
    1e9c:	e0211003 	eor	r1, r1, r3
    1ea0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1ea4:	e3a00000 	mov	r0, #0
    1ea8:	e8bd4070 	pop	{r4, r5, r6, lr}
    1eac:	e12fff1e 	bx	lr
    1eb0:	e1906081 	orrs	r6, r0, r1, lsl #1
    1eb4:	01a00002 	moveq	r0, r2
    1eb8:	01a01003 	moveq	r1, r3
    1ebc:	11926083 	orrsne	r6, r2, r3, lsl #1
    1ec0:	0a000010 	beq	1f08 <__aeabi_dmul+0x280>
    1ec4:	e134000c 	teq	r4, r12
    1ec8:	1a000001 	bne	1ed4 <__aeabi_dmul+0x24c>
    1ecc:	e1906601 	orrs	r6, r0, r1, lsl #12
    1ed0:	1a00000c 	bne	1f08 <__aeabi_dmul+0x280>
    1ed4:	e135000c 	teq	r5, r12
    1ed8:	1a000003 	bne	1eec <__aeabi_dmul+0x264>
    1edc:	e1926603 	orrs	r6, r2, r3, lsl #12
    1ee0:	11a00002 	movne	r0, r2
    1ee4:	11a01003 	movne	r1, r3
    1ee8:	1a000006 	bne	1f08 <__aeabi_dmul+0x280>
    1eec:	e0211003 	eor	r1, r1, r3
    1ef0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1ef4:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1ef8:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1efc:	e3a00000 	mov	r0, #0
    1f00:	e8bd4070 	pop	{r4, r5, r6, lr}
    1f04:	e12fff1e 	bx	lr
    1f08:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1f0c:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    1f10:	e8bd4070 	pop	{r4, r5, r6, lr}
    1f14:	e12fff1e 	bx	lr

00001f18 <__aeabi_ddiv>:
    1f18:	e92d4070 	push	{r4, r5, r6, lr}
    1f1c:	e3a0c0ff 	mov	r12, #255	; 0xff
    1f20:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1f24:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1f28:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1f2c:	1134000c 	teqne	r4, r12
    1f30:	1135000c 	teqne	r5, r12
    1f34:	0b00005e 	bleq	20b4 <__aeabi_ddiv+0x19c>
    1f38:	e0444005 	sub	r4, r4, r5
    1f3c:	e021e003 	eor	lr, r1, r3
    1f40:	e1925603 	orrs	r5, r2, r3, lsl #12
    1f44:	e1a01601 	lsl	r1, r1, #12
    1f48:	0a00004c 	beq	2080 <__aeabi_ddiv+0x168>
    1f4c:	e1a03603 	lsl	r3, r3, #12
    1f50:	e3a05201 	mov	r5, #268435456	; 0x10000000
    1f54:	e1853223 	orr	r3, r5, r3, lsr #4
    1f58:	e1833c22 	orr	r3, r3, r2, lsr #24
    1f5c:	e1a02402 	lsl	r2, r2, #8
    1f60:	e1855221 	orr	r5, r5, r1, lsr #4
    1f64:	e1855c20 	orr	r5, r5, r0, lsr #24
    1f68:	e1a06400 	lsl	r6, r0, #8
    1f6c:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    1f70:	e1550003 	cmp	r5, r3
    1f74:	01560002 	cmpeq	r6, r2
    1f78:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    1f7c:	e2844c03 	add	r4, r4, #768	; 0x300
    1f80:	2a000001 	bcs	1f8c <__aeabi_ddiv+0x74>
    1f84:	e1b030a3 	lsrs	r3, r3, #1
    1f88:	e1a02062 	rrx	r2, r2
    1f8c:	e0566002 	subs	r6, r6, r2
    1f90:	e0c55003 	sbc	r5, r5, r3
    1f94:	e1b030a3 	lsrs	r3, r3, #1
    1f98:	e1a02062 	rrx	r2, r2
    1f9c:	e3a00601 	mov	r0, #1048576	; 0x100000
    1fa0:	e3a0c702 	mov	r12, #524288	; 0x80000
    1fa4:	e056e002 	subs	lr, r6, r2
    1fa8:	e0d5e003 	sbcs	lr, r5, r3
    1fac:	20466002 	subcs	r6, r6, r2
    1fb0:	21a0500e 	movcs	r5, lr
    1fb4:	2180000c 	orrcs	r0, r0, r12
    1fb8:	e1b030a3 	lsrs	r3, r3, #1
    1fbc:	e1a02062 	rrx	r2, r2
    1fc0:	e056e002 	subs	lr, r6, r2
    1fc4:	e0d5e003 	sbcs	lr, r5, r3
    1fc8:	20466002 	subcs	r6, r6, r2
    1fcc:	21a0500e 	movcs	r5, lr
    1fd0:	218000ac 	orrcs	r0, r0, r12, lsr #1
    1fd4:	e1b030a3 	lsrs	r3, r3, #1
    1fd8:	e1a02062 	rrx	r2, r2
    1fdc:	e056e002 	subs	lr, r6, r2
    1fe0:	e0d5e003 	sbcs	lr, r5, r3
    1fe4:	20466002 	subcs	r6, r6, r2
    1fe8:	21a0500e 	movcs	r5, lr
    1fec:	2180012c 	orrcs	r0, r0, r12, lsr #2
    1ff0:	e1b030a3 	lsrs	r3, r3, #1
    1ff4:	e1a02062 	rrx	r2, r2
    1ff8:	e056e002 	subs	lr, r6, r2
    1ffc:	e0d5e003 	sbcs	lr, r5, r3
    2000:	20466002 	subcs	r6, r6, r2
    2004:	21a0500e 	movcs	r5, lr
    2008:	218001ac 	orrcs	r0, r0, r12, lsr #3
    200c:	e195e006 	orrs	lr, r5, r6
    2010:	0a00000d 	beq	204c <__aeabi_ddiv+0x134>
    2014:	e1a05205 	lsl	r5, r5, #4
    2018:	e1855e26 	orr	r5, r5, r6, lsr #28
    201c:	e1a06206 	lsl	r6, r6, #4
    2020:	e1a03183 	lsl	r3, r3, #3
    2024:	e1833ea2 	orr	r3, r3, r2, lsr #29
    2028:	e1a02182 	lsl	r2, r2, #3
    202c:	e1b0c22c 	lsrs	r12, r12, #4
    2030:	1affffdb 	bne	1fa4 <__aeabi_ddiv+0x8c>
    2034:	e3110601 	tst	r1, #1048576	; 0x100000
    2038:	1a000006 	bne	2058 <__aeabi_ddiv+0x140>
    203c:	e1811000 	orr	r1, r1, r0
    2040:	e3a00000 	mov	r0, #0
    2044:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    2048:	eaffffd5 	b	1fa4 <__aeabi_ddiv+0x8c>
    204c:	e3110601 	tst	r1, #1048576	; 0x100000
    2050:	01811000 	orreq	r1, r1, r0
    2054:	03a00000 	moveq	r0, #0
    2058:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    205c:	835c0c07 	cmphi	r12, #1792	; 0x700
    2060:	8affff43 	bhi	1d74 <__aeabi_dmul+0xec>
    2064:	e055c003 	subs	r12, r5, r3
    2068:	0056c002 	subseq	r12, r6, r2
    206c:	01b0c0a0 	lsrseq	r12, r0, #1
    2070:	e2b00000 	adcs	r0, r0, #0
    2074:	e0a11a04 	adc	r1, r1, r4, lsl #20
    2078:	e8bd4070 	pop	{r4, r5, r6, lr}
    207c:	e12fff1e 	bx	lr
    2080:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    2084:	e18e1621 	orr	r1, lr, r1, lsr #12
    2088:	e09440ac 	adds	r4, r4, r12, lsr #1
    208c:	c074500c 	rsbsgt	r5, r4, r12
    2090:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    2094:	c8bd4070 	popgt	{r4, r5, r6, lr}
    2098:	c12fff1e 	bxgt	lr
    209c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    20a0:	e3a0e000 	mov	lr, #0
    20a4:	e2544001 	subs	r4, r4, #1
    20a8:	eaffff31 	b	1d74 <__aeabi_dmul+0xec>
    20ac:	e185e006 	orr	lr, r5, r6
    20b0:	eaffff2f 	b	1d74 <__aeabi_dmul+0xec>
    20b4:	e00c5a23 	and	r5, r12, r3, lsr #20
    20b8:	e134000c 	teq	r4, r12
    20bc:	0135000c 	teqeq	r5, r12
    20c0:	0affff90 	beq	1f08 <__aeabi_dmul+0x280>
    20c4:	e134000c 	teq	r4, r12
    20c8:	1a000006 	bne	20e8 <__aeabi_ddiv+0x1d0>
    20cc:	e1904601 	orrs	r4, r0, r1, lsl #12
    20d0:	1affff8c 	bne	1f08 <__aeabi_dmul+0x280>
    20d4:	e135000c 	teq	r5, r12
    20d8:	1affff83 	bne	1eec <__aeabi_dmul+0x264>
    20dc:	e1a00002 	mov	r0, r2
    20e0:	e1a01003 	mov	r1, r3
    20e4:	eaffff87 	b	1f08 <__aeabi_dmul+0x280>
    20e8:	e135000c 	teq	r5, r12
    20ec:	1a000004 	bne	2104 <__aeabi_ddiv+0x1ec>
    20f0:	e1925603 	orrs	r5, r2, r3, lsl #12
    20f4:	0affff68 	beq	1e9c <__aeabi_dmul+0x214>
    20f8:	e1a00002 	mov	r0, r2
    20fc:	e1a01003 	mov	r1, r3
    2100:	eaffff80 	b	1f08 <__aeabi_dmul+0x280>
    2104:	e1906081 	orrs	r6, r0, r1, lsl #1
    2108:	11926083 	orrsne	r6, r2, r3, lsl #1
    210c:	1affff48 	bne	1e34 <__aeabi_dmul+0x1ac>
    2110:	e1904081 	orrs	r4, r0, r1, lsl #1
    2114:	1affff74 	bne	1eec <__aeabi_dmul+0x264>
    2118:	e1925083 	orrs	r5, r2, r3, lsl #1
    211c:	1affff5e 	bne	1e9c <__aeabi_dmul+0x214>
    2120:	eaffff78 	b	1f08 <__aeabi_dmul+0x280>

00002124 <__aeabi_d2iz>:
    2124:	e1a02081 	lsl	r2, r1, #1
    2128:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    212c:	2a00000c 	bcs	2164 <__aeabi_d2iz+0x40>
    2130:	5a000009 	bpl	215c <__aeabi_d2iz+0x38>
    2134:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    2138:	e0532ac2 	subs	r2, r3, r2, asr #21
    213c:	9a00000a 	bls	216c <__aeabi_d2iz+0x48>
    2140:	e1a03581 	lsl	r3, r1, #11
    2144:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    2148:	e1833aa0 	orr	r3, r3, r0, lsr #21
    214c:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    2150:	e1a00233 	lsr	r0, r3, r2
    2154:	12600000 	rsbne	r0, r0, #0
    2158:	e12fff1e 	bx	lr
    215c:	e3a00000 	mov	r0, #0
    2160:	e12fff1e 	bx	lr
    2164:	e1900601 	orrs	r0, r0, r1, lsl #12
    2168:	1a000002 	bne	2178 <__aeabi_d2iz+0x54>
    216c:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    2170:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    2174:	e12fff1e 	bx	lr
    2178:	e3a00000 	mov	r0, #0
    217c:	e12fff1e 	bx	lr

00002180 <__aeabi_frsub>:
    2180:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    2184:	ea000000 	b	218c <__addsf3>

00002188 <__aeabi_fsub>:
    2188:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

0000218c <__addsf3>:
    218c:	e1b02080 	lsls	r2, r0, #1
    2190:	11b03081 	lslsne	r3, r1, #1
    2194:	11320003 	teqne	r2, r3
    2198:	11f0cc42 	mvnsne	r12, r2, asr #24
    219c:	11f0cc43 	mvnsne	r12, r3, asr #24
    21a0:	0a000047 	beq	22c4 <__addsf3+0x138>
    21a4:	e1a02c22 	lsr	r2, r2, #24
    21a8:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    21ac:	c0822003 	addgt	r2, r2, r3
    21b0:	c0201001 	eorgt	r1, r0, r1
    21b4:	c0210000 	eorgt	r0, r1, r0
    21b8:	c0201001 	eorgt	r1, r0, r1
    21bc:	b2633000 	rsblt	r3, r3, #0
    21c0:	e3530019 	cmp	r3, #25
    21c4:	812fff1e 	bxhi	lr
    21c8:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    21cc:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    21d0:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    21d4:	12600000 	rsbne	r0, r0, #0
    21d8:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    21dc:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    21e0:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    21e4:	12611000 	rsbne	r1, r1, #0
    21e8:	e1320003 	teq	r2, r3
    21ec:	0a00002e 	beq	22ac <__addsf3+0x120>
    21f0:	e2422001 	sub	r2, r2, #1
    21f4:	e0900351 	adds	r0, r0, r1, asr r3
    21f8:	e2633020 	rsb	r3, r3, #32
    21fc:	e1a01311 	lsl	r1, r1, r3
    2200:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    2204:	5a000001 	bpl	2210 <__addsf3+0x84>
    2208:	e2711000 	rsbs	r1, r1, #0
    220c:	e2e00000 	rsc	r0, r0, #0
    2210:	e3500502 	cmp	r0, #8388608	; 0x800000
    2214:	3a00000b 	bcc	2248 <__addsf3+0xbc>
    2218:	e3500401 	cmp	r0, #16777216	; 0x1000000
    221c:	3a000004 	bcc	2234 <__addsf3+0xa8>
    2220:	e1b000a0 	lsrs	r0, r0, #1
    2224:	e1a01061 	rrx	r1, r1
    2228:	e2822001 	add	r2, r2, #1
    222c:	e35200fe 	cmp	r2, #254	; 0xfe
    2230:	2a000038 	bcs	2318 <__addsf3+0x18c>
    2234:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    2238:	e0a00b82 	adc	r0, r0, r2, lsl #23
    223c:	03c00001 	biceq	r0, r0, #1
    2240:	e1800003 	orr	r0, r0, r3
    2244:	e12fff1e 	bx	lr
    2248:	e1b01081 	lsls	r1, r1, #1
    224c:	e0a00000 	adc	r0, r0, r0
    2250:	e3100502 	tst	r0, #8388608	; 0x800000
    2254:	e2422001 	sub	r2, r2, #1
    2258:	1afffff5 	bne	2234 <__addsf3+0xa8>
    225c:	e1b0c620 	lsrs	r12, r0, #12
    2260:	01a00600 	lsleq	r0, r0, #12
    2264:	0242200c 	subeq	r2, r2, #12
    2268:	e31008ff 	tst	r0, #16711680	; 0xff0000
    226c:	01a00400 	lsleq	r0, r0, #8
    2270:	02422008 	subeq	r2, r2, #8
    2274:	e310060f 	tst	r0, #15728640	; 0xf00000
    2278:	01a00200 	lsleq	r0, r0, #4
    227c:	02422004 	subeq	r2, r2, #4
    2280:	e3100503 	tst	r0, #12582912	; 0xc00000
    2284:	01a00100 	lsleq	r0, r0, #2
    2288:	02422002 	subeq	r2, r2, #2
    228c:	e3500502 	cmp	r0, #8388608	; 0x800000
    2290:	31a00080 	lslcc	r0, r0, #1
    2294:	e2d22000 	sbcs	r2, r2, #0
    2298:	a0800b82 	addge	r0, r0, r2, lsl #23
    229c:	b2622000 	rsblt	r2, r2, #0
    22a0:	a1800003 	orrge	r0, r0, r3
    22a4:	b1830230 	orrlt	r0, r3, r0, lsr r2
    22a8:	e12fff1e 	bx	lr
    22ac:	e3320000 	teq	r2, #0
    22b0:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    22b4:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    22b8:	02822001 	addeq	r2, r2, #1
    22bc:	12433001 	subne	r3, r3, #1
    22c0:	eaffffca 	b	21f0 <__addsf3+0x64>
    22c4:	e1a03081 	lsl	r3, r1, #1
    22c8:	e1f0cc42 	mvns	r12, r2, asr #24
    22cc:	11f0cc43 	mvnsne	r12, r3, asr #24
    22d0:	0a000013 	beq	2324 <__addsf3+0x198>
    22d4:	e1320003 	teq	r2, r3
    22d8:	0a000002 	beq	22e8 <__addsf3+0x15c>
    22dc:	e3320000 	teq	r2, #0
    22e0:	01a00001 	moveq	r0, r1
    22e4:	e12fff1e 	bx	lr
    22e8:	e1300001 	teq	r0, r1
    22ec:	13a00000 	movne	r0, #0
    22f0:	112fff1e 	bxne	lr
    22f4:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    22f8:	1a000002 	bne	2308 <__addsf3+0x17c>
    22fc:	e1b00080 	lsls	r0, r0, #1
    2300:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    2304:	e12fff1e 	bx	lr
    2308:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    230c:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    2310:	312fff1e 	bxcc	lr
    2314:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    2318:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    231c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2320:	e12fff1e 	bx	lr
    2324:	e1f02c42 	mvns	r2, r2, asr #24
    2328:	11a00001 	movne	r0, r1
    232c:	01f03c43 	mvnseq	r3, r3, asr #24
    2330:	11a01000 	movne	r1, r0
    2334:	e1b02480 	lsls	r2, r0, #9
    2338:	01b03481 	lslseq	r3, r1, #9
    233c:	01300001 	teqeq	r0, r1
    2340:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    2344:	e12fff1e 	bx	lr

00002348 <__aeabi_ui2f>:
    2348:	e3a03000 	mov	r3, #0
    234c:	ea000001 	b	2358 <__aeabi_i2f+0x8>

00002350 <__aeabi_i2f>:
    2350:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    2354:	42600000 	rsbmi	r0, r0, #0
    2358:	e1b0c000 	movs	r12, r0
    235c:	012fff1e 	bxeq	lr
    2360:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    2364:	e1a01000 	mov	r1, r0
    2368:	e3a00000 	mov	r0, #0
    236c:	ea00000f 	b	23b0 <__aeabi_l2f+0x30>

00002370 <__aeabi_ul2f>:
    2370:	e1902001 	orrs	r2, r0, r1
    2374:	012fff1e 	bxeq	lr
    2378:	e3a03000 	mov	r3, #0
    237c:	ea000005 	b	2398 <__aeabi_l2f+0x18>

00002380 <__aeabi_l2f>:
    2380:	e1902001 	orrs	r2, r0, r1
    2384:	012fff1e 	bxeq	lr
    2388:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    238c:	5a000001 	bpl	2398 <__aeabi_l2f+0x18>
    2390:	e2700000 	rsbs	r0, r0, #0
    2394:	e2e11000 	rsc	r1, r1, #0
    2398:	e1b0c001 	movs	r12, r1
    239c:	01a0c000 	moveq	r12, r0
    23a0:	01a01000 	moveq	r1, r0
    23a4:	03a00000 	moveq	r0, #0
    23a8:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    23ac:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    23b0:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    23b4:	e3a02017 	mov	r2, #23
    23b8:	e35c0801 	cmp	r12, #65536	; 0x10000
    23bc:	21a0c82c 	lsrcs	r12, r12, #16
    23c0:	22422010 	subcs	r2, r2, #16
    23c4:	e35c0c01 	cmp	r12, #256	; 0x100
    23c8:	21a0c42c 	lsrcs	r12, r12, #8
    23cc:	22422008 	subcs	r2, r2, #8
    23d0:	e35c0010 	cmp	r12, #16
    23d4:	21a0c22c 	lsrcs	r12, r12, #4
    23d8:	22422004 	subcs	r2, r2, #4
    23dc:	e35c0004 	cmp	r12, #4
    23e0:	22422002 	subcs	r2, r2, #2
    23e4:	304220ac 	subcc	r2, r2, r12, lsr #1
    23e8:	e05221ac 	subs	r2, r2, r12, lsr #3
    23ec:	e0433b82 	sub	r3, r3, r2, lsl #23
    23f0:	ba000006 	blt	2410 <__aeabi_l2f+0x90>
    23f4:	e0833211 	add	r3, r3, r1, lsl r2
    23f8:	e1a0c210 	lsl	r12, r0, r2
    23fc:	e2622020 	rsb	r2, r2, #32
    2400:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    2404:	e0a30230 	adc	r0, r3, r0, lsr r2
    2408:	03c00001 	biceq	r0, r0, #1
    240c:	e12fff1e 	bx	lr
    2410:	e2822020 	add	r2, r2, #32
    2414:	e1a0c211 	lsl	r12, r1, r2
    2418:	e2622020 	rsb	r2, r2, #32
    241c:	e190008c 	orrs	r0, r0, r12, lsl #1
    2420:	e0a30231 	adc	r0, r3, r1, lsr r2
    2424:	01c00fac 	biceq	r0, r0, r12, lsr #31
    2428:	e12fff1e 	bx	lr

0000242c <__aeabi_fmul>:
    242c:	e3a0c0ff 	mov	r12, #255	; 0xff
    2430:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    2434:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    2438:	1132000c 	teqne	r2, r12
    243c:	1133000c 	teqne	r3, r12
    2440:	0a00003e 	beq	2540 <__aeabi_fmul+0x114>
    2444:	e0822003 	add	r2, r2, r3
    2448:	e020c001 	eor	r12, r0, r1
    244c:	e1b00480 	lsls	r0, r0, #9
    2450:	11b01481 	lslsne	r1, r1, #9
    2454:	0a000010 	beq	249c <__aeabi_fmul+0x70>
    2458:	e3a03302 	mov	r3, #134217728	; 0x8000000
    245c:	e18302a0 	orr	r0, r3, r0, lsr #5
    2460:	e18312a1 	orr	r1, r3, r1, lsr #5
    2464:	e0813190 	umull	r3, r1, r0, r1
    2468:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    246c:	e3510502 	cmp	r1, #8388608	; 0x800000
    2470:	31a01081 	lslcc	r1, r1, #1
    2474:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    2478:	31a03083 	lslcc	r3, r3, #1
    247c:	e1800001 	orr	r0, r0, r1
    2480:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    2484:	e35200fd 	cmp	r2, #253	; 0xfd
    2488:	8a00000f 	bhi	24cc <__aeabi_fmul+0xa0>
    248c:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    2490:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2494:	03c00001 	biceq	r0, r0, #1
    2498:	e12fff1e 	bx	lr
    249c:	e3300000 	teq	r0, #0
    24a0:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    24a4:	01a01481 	lsleq	r1, r1, #9
    24a8:	e18c04a0 	orr	r0, r12, r0, lsr #9
    24ac:	e18004a1 	orr	r0, r0, r1, lsr #9
    24b0:	e252207f 	subs	r2, r2, #127	; 0x7f
    24b4:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    24b8:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    24bc:	c12fff1e 	bxgt	lr
    24c0:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    24c4:	e3a03000 	mov	r3, #0
    24c8:	e2522001 	subs	r2, r2, #1
    24cc:	ca000035 	bgt	25a8 <__aeabi_fmul+0x17c>
    24d0:	e3720019 	cmn	r2, #25
    24d4:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    24d8:	d12fff1e 	bxle	lr
    24dc:	e2622000 	rsb	r2, r2, #0
    24e0:	e1b01080 	lsls	r1, r0, #1
    24e4:	e1a01231 	lsr	r1, r1, r2
    24e8:	e2622020 	rsb	r2, r2, #32
    24ec:	e1a0c210 	lsl	r12, r0, r2
    24f0:	e1b00061 	rrxs	r0, r1
    24f4:	e2a00000 	adc	r0, r0, #0
    24f8:	e193308c 	orrs	r3, r3, r12, lsl #1
    24fc:	01c00fac 	biceq	r0, r0, r12, lsr #31
    2500:	e12fff1e 	bx	lr
    2504:	e3320000 	teq	r2, #0
    2508:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    250c:	01a00080 	lsleq	r0, r0, #1
    2510:	03100502 	tsteq	r0, #8388608	; 0x800000
    2514:	02422001 	subeq	r2, r2, #1
    2518:	0afffffb 	beq	250c <__aeabi_fmul+0xe0>
    251c:	e180000c 	orr	r0, r0, r12
    2520:	e3330000 	teq	r3, #0
    2524:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    2528:	01a01081 	lsleq	r1, r1, #1
    252c:	03110502 	tsteq	r1, #8388608	; 0x800000
    2530:	02433001 	subeq	r3, r3, #1
    2534:	0afffffb 	beq	2528 <__aeabi_fmul+0xfc>
    2538:	e181100c 	orr	r1, r1, r12
    253c:	eaffffc0 	b	2444 <__aeabi_fmul+0x18>
    2540:	e00c3ba1 	and	r3, r12, r1, lsr #23
    2544:	e132000c 	teq	r2, r12
    2548:	1133000c 	teqne	r3, r12
    254c:	0a000005 	beq	2568 <__aeabi_fmul+0x13c>
    2550:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    2554:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    2558:	1affffe9 	bne	2504 <__aeabi_fmul+0xd8>
    255c:	e0200001 	eor	r0, r0, r1
    2560:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    2564:	e12fff1e 	bx	lr
    2568:	e3300000 	teq	r0, #0
    256c:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    2570:	01a00001 	moveq	r0, r1
    2574:	13310000 	teqne	r1, #0
    2578:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    257c:	0a00000d 	beq	25b8 <__aeabi_fmul+0x18c>
    2580:	e132000c 	teq	r2, r12
    2584:	1a000001 	bne	2590 <__aeabi_fmul+0x164>
    2588:	e1b02480 	lsls	r2, r0, #9
    258c:	1a000009 	bne	25b8 <__aeabi_fmul+0x18c>
    2590:	e133000c 	teq	r3, r12
    2594:	1a000002 	bne	25a4 <__aeabi_fmul+0x178>
    2598:	e1b03481 	lsls	r3, r1, #9
    259c:	11a00001 	movne	r0, r1
    25a0:	1a000004 	bne	25b8 <__aeabi_fmul+0x18c>
    25a4:	e0200001 	eor	r0, r0, r1
    25a8:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    25ac:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    25b0:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    25b4:	e12fff1e 	bx	lr
    25b8:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    25bc:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    25c0:	e12fff1e 	bx	lr

000025c4 <__aeabi_fdiv>:
    25c4:	e3a0c0ff 	mov	r12, #255	; 0xff
    25c8:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    25cc:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    25d0:	1132000c 	teqne	r2, r12
    25d4:	1133000c 	teqne	r3, r12
    25d8:	0a00003a 	beq	26c8 <__aeabi_fdiv+0x104>
    25dc:	e0422003 	sub	r2, r2, r3
    25e0:	e020c001 	eor	r12, r0, r1
    25e4:	e1b01481 	lsls	r1, r1, #9
    25e8:	e1a00480 	lsl	r0, r0, #9
    25ec:	0a00001c 	beq	2664 <__aeabi_fdiv+0xa0>
    25f0:	e3a03201 	mov	r3, #268435456	; 0x10000000
    25f4:	e1831221 	orr	r1, r3, r1, lsr #4
    25f8:	e1833220 	orr	r3, r3, r0, lsr #4
    25fc:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    2600:	e1530001 	cmp	r3, r1
    2604:	31a03083 	lslcc	r3, r3, #1
    2608:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    260c:	e3a0c502 	mov	r12, #8388608	; 0x800000
    2610:	e1530001 	cmp	r3, r1
    2614:	20433001 	subcs	r3, r3, r1
    2618:	2180000c 	orrcs	r0, r0, r12
    261c:	e15300a1 	cmp	r3, r1, lsr #1
    2620:	204330a1 	subcs	r3, r3, r1, lsr #1
    2624:	218000ac 	orrcs	r0, r0, r12, lsr #1
    2628:	e1530121 	cmp	r3, r1, lsr #2
    262c:	20433121 	subcs	r3, r3, r1, lsr #2
    2630:	2180012c 	orrcs	r0, r0, r12, lsr #2
    2634:	e15301a1 	cmp	r3, r1, lsr #3
    2638:	204331a1 	subcs	r3, r3, r1, lsr #3
    263c:	218001ac 	orrcs	r0, r0, r12, lsr #3
    2640:	e1b03203 	lsls	r3, r3, #4
    2644:	11b0c22c 	lsrsne	r12, r12, #4
    2648:	1afffff0 	bne	2610 <__aeabi_fdiv+0x4c>
    264c:	e35200fd 	cmp	r2, #253	; 0xfd
    2650:	8affff9d 	bhi	24cc <__aeabi_fmul+0xa0>
    2654:	e1530001 	cmp	r3, r1
    2658:	e0a00b82 	adc	r0, r0, r2, lsl #23
    265c:	03c00001 	biceq	r0, r0, #1
    2660:	e12fff1e 	bx	lr
    2664:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    2668:	e18c04a0 	orr	r0, r12, r0, lsr #9
    266c:	e292207f 	adds	r2, r2, #127	; 0x7f
    2670:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    2674:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    2678:	c12fff1e 	bxgt	lr
    267c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2680:	e3a03000 	mov	r3, #0
    2684:	e2522001 	subs	r2, r2, #1
    2688:	eaffff8f 	b	24cc <__aeabi_fmul+0xa0>
    268c:	e3320000 	teq	r2, #0
    2690:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    2694:	01a00080 	lsleq	r0, r0, #1
    2698:	03100502 	tsteq	r0, #8388608	; 0x800000
    269c:	02422001 	subeq	r2, r2, #1
    26a0:	0afffffb 	beq	2694 <__aeabi_fdiv+0xd0>
    26a4:	e180000c 	orr	r0, r0, r12
    26a8:	e3330000 	teq	r3, #0
    26ac:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    26b0:	01a01081 	lsleq	r1, r1, #1
    26b4:	03110502 	tsteq	r1, #8388608	; 0x800000
    26b8:	02433001 	subeq	r3, r3, #1
    26bc:	0afffffb 	beq	26b0 <__aeabi_fdiv+0xec>
    26c0:	e181100c 	orr	r1, r1, r12
    26c4:	eaffffc4 	b	25dc <__aeabi_fdiv+0x18>
    26c8:	e00c3ba1 	and	r3, r12, r1, lsr #23
    26cc:	e132000c 	teq	r2, r12
    26d0:	1a000005 	bne	26ec <__aeabi_fdiv+0x128>
    26d4:	e1b02480 	lsls	r2, r0, #9
    26d8:	1affffb6 	bne	25b8 <__aeabi_fmul+0x18c>
    26dc:	e133000c 	teq	r3, r12
    26e0:	1affffaf 	bne	25a4 <__aeabi_fmul+0x178>
    26e4:	e1a00001 	mov	r0, r1
    26e8:	eaffffb2 	b	25b8 <__aeabi_fmul+0x18c>
    26ec:	e133000c 	teq	r3, r12
    26f0:	1a000003 	bne	2704 <__aeabi_fdiv+0x140>
    26f4:	e1b03481 	lsls	r3, r1, #9
    26f8:	0affff97 	beq	255c <__aeabi_fmul+0x130>
    26fc:	e1a00001 	mov	r0, r1
    2700:	eaffffac 	b	25b8 <__aeabi_fmul+0x18c>
    2704:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    2708:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    270c:	1affffde 	bne	268c <__aeabi_fdiv+0xc8>
    2710:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    2714:	1affffa2 	bne	25a4 <__aeabi_fmul+0x178>
    2718:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    271c:	1affff8e 	bne	255c <__aeabi_fmul+0x130>
    2720:	eaffffa4 	b	25b8 <__aeabi_fmul+0x18c>

00002724 <__gesf2>:
    2724:	e3e0c000 	mvn	r12, #0
    2728:	ea000002 	b	2738 <__cmpsf2+0x4>

0000272c <__lesf2>:
    272c:	e3a0c001 	mov	r12, #1
    2730:	ea000000 	b	2738 <__cmpsf2+0x4>

00002734 <__cmpsf2>:
    2734:	e3a0c001 	mov	r12, #1
    2738:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    273c:	e1a02080 	lsl	r2, r0, #1
    2740:	e1a03081 	lsl	r3, r1, #1
    2744:	e1f0cc42 	mvns	r12, r2, asr #24
    2748:	11f0cc43 	mvnsne	r12, r3, asr #24
    274c:	0a000007 	beq	2770 <__cmpsf2+0x3c>
    2750:	e28dd004 	add	sp, sp, #4
    2754:	e192c0a3 	orrs	r12, r2, r3, lsr #1
    2758:	11300001 	teqne	r0, r1
    275c:	50520003 	subspl	r0, r2, r3
    2760:	81a00fc1 	asrhi	r0, r1, #31
    2764:	31e00fc1 	mvncc	r0, r1, asr #31
    2768:	13800001 	orrne	r0, r0, #1
    276c:	e12fff1e 	bx	lr
    2770:	e1f0cc42 	mvns	r12, r2, asr #24
    2774:	1a000001 	bne	2780 <__cmpsf2+0x4c>
    2778:	e1b0c480 	lsls	r12, r0, #9
    277c:	1a000003 	bne	2790 <__cmpsf2+0x5c>
    2780:	e1f0cc43 	mvns	r12, r3, asr #24
    2784:	1afffff1 	bne	2750 <__cmpsf2+0x1c>
    2788:	e1b0c481 	lsls	r12, r1, #9
    278c:	0affffef 	beq	2750 <__cmpsf2+0x1c>
    2790:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    2794:	e12fff1e 	bx	lr

00002798 <__aeabi_cfrcmple>:
    2798:	e1a0c000 	mov	r12, r0
    279c:	e1a00001 	mov	r0, r1
    27a0:	e1a0100c 	mov	r1, r12
    27a4:	eaffffff 	b	27a8 <__aeabi_cfcmpeq>

000027a8 <__aeabi_cfcmpeq>:
    27a8:	e92d400f 	push	{r0, r1, r2, r3, lr}
    27ac:	ebffffe0 	bl	2734 <__cmpsf2>
    27b0:	e3500000 	cmp	r0, #0
    27b4:	43700000 	cmnmi	r0, #0
    27b8:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
    27bc:	e12fff1e 	bx	lr

000027c0 <__aeabi_fcmpeq>:
    27c0:	e52de008 	str	lr, [sp, #-8]!
    27c4:	ebfffff7 	bl	27a8 <__aeabi_cfcmpeq>
    27c8:	03a00001 	moveq	r0, #1
    27cc:	13a00000 	movne	r0, #0
    27d0:	e49de008 	ldr	lr, [sp], #8
    27d4:	e12fff1e 	bx	lr

000027d8 <__aeabi_fcmplt>:
    27d8:	e52de008 	str	lr, [sp, #-8]!
    27dc:	ebfffff1 	bl	27a8 <__aeabi_cfcmpeq>
    27e0:	33a00001 	movcc	r0, #1
    27e4:	23a00000 	movcs	r0, #0
    27e8:	e49de008 	ldr	lr, [sp], #8
    27ec:	e12fff1e 	bx	lr

000027f0 <__aeabi_fcmple>:
    27f0:	e52de008 	str	lr, [sp, #-8]!
    27f4:	ebffffeb 	bl	27a8 <__aeabi_cfcmpeq>
    27f8:	93a00001 	movls	r0, #1
    27fc:	83a00000 	movhi	r0, #0
    2800:	e49de008 	ldr	lr, [sp], #8
    2804:	e12fff1e 	bx	lr

00002808 <__aeabi_fcmpge>:
    2808:	e52de008 	str	lr, [sp, #-8]!
    280c:	ebffffe1 	bl	2798 <__aeabi_cfrcmple>
    2810:	93a00001 	movls	r0, #1
    2814:	83a00000 	movhi	r0, #0
    2818:	e49de008 	ldr	lr, [sp], #8
    281c:	e12fff1e 	bx	lr

00002820 <__aeabi_fcmpgt>:
    2820:	e52de008 	str	lr, [sp, #-8]!
    2824:	ebffffdb 	bl	2798 <__aeabi_cfrcmple>
    2828:	33a00001 	movcc	r0, #1
    282c:	23a00000 	movcs	r0, #0
    2830:	e49de008 	ldr	lr, [sp], #8
    2834:	e12fff1e 	bx	lr

00002838 <__aeabi_f2iz>:
    2838:	e1a02080 	lsl	r2, r0, #1
    283c:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    2840:	3a000008 	bcc	2868 <__aeabi_f2iz+0x30>
    2844:	e3a0309e 	mov	r3, #158	; 0x9e
    2848:	e0532c22 	subs	r2, r3, r2, lsr #24
    284c:	9a000007 	bls	2870 <__aeabi_f2iz+0x38>
    2850:	e1a03400 	lsl	r3, r0, #8
    2854:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    2858:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    285c:	e1a00233 	lsr	r0, r3, r2
    2860:	12600000 	rsbne	r0, r0, #0
    2864:	e12fff1e 	bx	lr
    2868:	e3a00000 	mov	r0, #0
    286c:	e12fff1e 	bx	lr
    2870:	e3720061 	cmn	r2, #97	; 0x61
    2874:	1a000001 	bne	2880 <__aeabi_f2iz+0x48>
    2878:	e1b02480 	lsls	r2, r0, #9
    287c:	1a000002 	bne	288c <__aeabi_f2iz+0x54>
    2880:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    2884:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    2888:	e12fff1e 	bx	lr
    288c:	e3a00000 	mov	r0, #0
    2890:	e12fff1e 	bx	lr

00002894 <atexit>:
    2894:	e1a01000 	mov	r1, r0
    2898:	e3a00000 	mov	r0, #0
    289c:	e92d4008 	push	{r3, lr}
    28a0:	e1a02000 	mov	r2, r0
    28a4:	e1a03000 	mov	r3, r0
    28a8:	eb00005b 	bl	2a1c <__register_exitproc>
    28ac:	e8bd4008 	pop	{r3, lr}
    28b0:	e12fff1e 	bx	lr

000028b4 <exit>:
    28b4:	e92d4008 	push	{r3, lr}
    28b8:	e3a01000 	mov	r1, #0
    28bc:	e1a04000 	mov	r4, r0
    28c0:	eb000092 	bl	2b10 <__call_exitprocs>
    28c4:	e59f3018 	ldr	r3, [pc, #24]	; 28e4 <exit+0x30>
    28c8:	e5930000 	ldr	r0, [r3]
    28cc:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    28d0:	e3530000 	cmp	r3, #0
    28d4:	11a0e00f 	movne	lr, pc
    28d8:	112fff13 	bxne	r3
    28dc:	e1a00004 	mov	r0, r4
    28e0:	eb000116 	bl	2d40 <_exit>
    28e4:	00002de8 	.word	0x00002de8

000028e8 <memset>:
    28e8:	e3520003 	cmp	r2, #3
    28ec:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    28f0:	e20110ff 	and	r1, r1, #255	; 0xff
    28f4:	8a000008 	bhi	291c <memset+0x34>
    28f8:	e3520000 	cmp	r2, #0
    28fc:	0a000004 	beq	2914 <memset+0x2c>
    2900:	e1a03000 	mov	r3, r0
    2904:	e0822000 	add	r2, r2, r0
    2908:	e4c31001 	strb	r1, [r3], #1
    290c:	e1530002 	cmp	r3, r2
    2910:	1afffffc 	bne	2908 <memset+0x20>
    2914:	e8bd0010 	ldmfd	sp!, {r4}
    2918:	e12fff1e 	bx	lr
    291c:	e3100003 	tst	r0, #3
    2920:	e0802002 	add	r2, r0, r2
    2924:	0a000007 	beq	2948 <memset+0x60>
    2928:	e280c001 	add	r12, r0, #1
    292c:	e20c3003 	and	r3, r12, #3
    2930:	e3530000 	cmp	r3, #0
    2934:	e54c1001 	strb	r1, [r12, #-1]
    2938:	e1a0300c 	mov	r3, r12
    293c:	e28cc001 	add	r12, r12, #1
    2940:	1afffff9 	bne	292c <memset+0x44>
    2944:	ea000000 	b	294c <memset+0x64>
    2948:	e1a03000 	mov	r3, r0
    294c:	e0634002 	rsb	r4, r3, r2
    2950:	e081c401 	add	r12, r1, r1, lsl #8
    2954:	e354003f 	cmp	r4, #63	; 0x3f
    2958:	e08cc80c 	add	r12, r12, r12, lsl #16
    295c:	da00001a 	ble	29cc <memset+0xe4>
    2960:	e583c000 	str	r12, [r3]
    2964:	e583c004 	str	r12, [r3, #4]
    2968:	e583c008 	str	r12, [r3, #8]
    296c:	e583c00c 	str	r12, [r3, #12]
    2970:	e583c010 	str	r12, [r3, #16]
    2974:	e583c014 	str	r12, [r3, #20]
    2978:	e583c018 	str	r12, [r3, #24]
    297c:	e583c01c 	str	r12, [r3, #28]
    2980:	e583c020 	str	r12, [r3, #32]
    2984:	e583c024 	str	r12, [r3, #36]	; 0x24
    2988:	e583c028 	str	r12, [r3, #40]	; 0x28
    298c:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    2990:	e583c030 	str	r12, [r3, #48]	; 0x30
    2994:	e583c034 	str	r12, [r3, #52]	; 0x34
    2998:	e583c038 	str	r12, [r3, #56]	; 0x38
    299c:	e583c03c 	str	r12, [r3, #60]	; 0x3c
    29a0:	e2833040 	add	r3, r3, #64	; 0x40
    29a4:	e0634002 	rsb	r4, r3, r2
    29a8:	e354003f 	cmp	r4, #63	; 0x3f
    29ac:	caffffeb 	bgt	2960 <memset+0x78>
    29b0:	ea000005 	b	29cc <memset+0xe4>
    29b4:	e583c000 	str	r12, [r3]
    29b8:	e583c004 	str	r12, [r3, #4]
    29bc:	e583c008 	str	r12, [r3, #8]
    29c0:	e583c00c 	str	r12, [r3, #12]
    29c4:	e2833010 	add	r3, r3, #16
    29c8:	e0634002 	rsb	r4, r3, r2
    29cc:	e354000f 	cmp	r4, #15
    29d0:	cafffff7 	bgt	29b4 <memset+0xcc>
    29d4:	e3540003 	cmp	r4, #3
    29d8:	da000006 	ble	29f8 <memset+0x110>
    29dc:	e2834004 	add	r4, r3, #4
    29e0:	e0643002 	rsb	r3, r4, r2
    29e4:	e3530003 	cmp	r3, #3
    29e8:	e504c004 	str	r12, [r4, #-4]
    29ec:	e1a03004 	mov	r3, r4
    29f0:	e2844004 	add	r4, r4, #4
    29f4:	cafffff9 	bgt	29e0 <memset+0xf8>
    29f8:	e1520003 	cmp	r2, r3
    29fc:	9affffc4 	bls	2914 <memset+0x2c>
    2a00:	e2833001 	add	r3, r3, #1
    2a04:	e2822001 	add	r2, r2, #1
    2a08:	e5431001 	strb	r1, [r3, #-1]
    2a0c:	e2833001 	add	r3, r3, #1
    2a10:	e1530002 	cmp	r3, r2
    2a14:	1afffffb 	bne	2a08 <memset+0x120>
    2a18:	eaffffbd 	b	2914 <memset+0x2c>

00002a1c <__register_exitproc>:
    2a1c:	e59fc0e4 	ldr	r12, [pc, #228]	; 2b08 <__register_exitproc+0xec>
    2a20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    2a24:	e59c4000 	ldr	r4, [r12]
    2a28:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    2a2c:	e35c0000 	cmp	r12, #0
    2a30:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    2a34:	e59c5004 	ldr	r5, [r12, #4]
    2a38:	0584c148 	streq	r12, [r4, #328]	; 0x148
    2a3c:	e355001f 	cmp	r5, #31
    2a40:	e24dd010 	sub	sp, sp, #16
    2a44:	e1a06000 	mov	r6, r0
    2a48:	da000015 	ble	2aa4 <__register_exitproc+0x88>
    2a4c:	e59f00b8 	ldr	r0, [pc, #184]	; 2b0c <__register_exitproc+0xf0>
    2a50:	e3500000 	cmp	r0, #0
    2a54:	1a000001 	bne	2a60 <__register_exitproc+0x44>
    2a58:	e3e00000 	mvn	r0, #0
    2a5c:	ea000018 	b	2ac4 <__register_exitproc+0xa8>
    2a60:	e3a00e19 	mov	r0, #400	; 0x190
    2a64:	e58d100c 	str	r1, [sp, #12]
    2a68:	e58d2008 	str	r2, [sp, #8]
    2a6c:	e58d3004 	str	r3, [sp, #4]
    2a70:	e320f000 	nop	{0}
    2a74:	e250c000 	subs	r12, r0, #0
    2a78:	e59d100c 	ldr	r1, [sp, #12]
    2a7c:	e59d2008 	ldr	r2, [sp, #8]
    2a80:	e59d3004 	ldr	r3, [sp, #4]
    2a84:	0afffff3 	beq	2a58 <__register_exitproc+0x3c>
    2a88:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    2a8c:	e3a00000 	mov	r0, #0
    2a90:	e58c0004 	str	r0, [r12, #4]
    2a94:	e58c5000 	str	r5, [r12]
    2a98:	e584c148 	str	r12, [r4, #328]	; 0x148
    2a9c:	e58c0188 	str	r0, [r12, #392]	; 0x188
    2aa0:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    2aa4:	e3560000 	cmp	r6, #0
    2aa8:	e59c4004 	ldr	r4, [r12, #4]
    2aac:	1a000007 	bne	2ad0 <__register_exitproc+0xb4>
    2ab0:	e2843002 	add	r3, r4, #2
    2ab4:	e2844001 	add	r4, r4, #1
    2ab8:	e78c1103 	str	r1, [r12, r3, lsl #2]
    2abc:	e58c4004 	str	r4, [r12, #4]
    2ac0:	e3a00000 	mov	r0, #0
    2ac4:	e28dd010 	add	sp, sp, #16
    2ac8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    2acc:	e12fff1e 	bx	lr
    2ad0:	e3a00001 	mov	r0, #1
    2ad4:	e1a00410 	lsl	r0, r0, r4
    2ad8:	e08c8104 	add	r8, r12, r4, lsl #2
    2adc:	e3560002 	cmp	r6, #2
    2ae0:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    2ae4:	e5883108 	str	r3, [r8, #264]	; 0x108
    2ae8:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    2aec:	e1877000 	orr	r7, r7, r0
    2af0:	01830000 	orreq	r0, r3, r0
    2af4:	e1a05008 	mov	r5, r8
    2af8:	e5882088 	str	r2, [r8, #136]	; 0x88
    2afc:	e58c7188 	str	r7, [r12, #392]	; 0x188
    2b00:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    2b04:	eaffffe9 	b	2ab0 <__register_exitproc+0x94>
    2b08:	00002de8 	.word	0x00002de8
    2b0c:	00000000 	.word	0x00000000

00002b10 <__call_exitprocs>:
    2b10:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2b14:	e59f3168 	ldr	r3, [pc, #360]	; 2c84 <__call_exitprocs+0x174>
    2b18:	e5933000 	ldr	r3, [r3]
    2b1c:	e24dd014 	sub	sp, sp, #20
    2b20:	e58d3004 	str	r3, [sp, #4]
    2b24:	e2833f52 	add	r3, r3, #328	; 0x148
    2b28:	e58d0008 	str	r0, [sp, #8]
    2b2c:	e58d300c 	str	r3, [sp, #12]
    2b30:	e1a07001 	mov	r7, r1
    2b34:	e3a08001 	mov	r8, #1
    2b38:	e59d3004 	ldr	r3, [sp, #4]
    2b3c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    2b40:	e3560000 	cmp	r6, #0
    2b44:	e59db00c 	ldr	r11, [sp, #12]
    2b48:	0a000033 	beq	2c1c <__call_exitprocs+0x10c>
    2b4c:	e5965004 	ldr	r5, [r6, #4]
    2b50:	e2554001 	subs	r4, r5, #1
    2b54:	5286a088 	addpl	r10, r6, #136	; 0x88
    2b58:	5285501f 	addpl	r5, r5, #31
    2b5c:	508a5105 	addpl	r5, r10, r5, lsl #2
    2b60:	5a000007 	bpl	2b84 <__call_exitprocs+0x74>
    2b64:	ea000029 	b	2c10 <__call_exitprocs+0x100>
    2b68:	e5953000 	ldr	r3, [r5]
    2b6c:	e1530007 	cmp	r3, r7
    2b70:	0a000005 	beq	2b8c <__call_exitprocs+0x7c>
    2b74:	e2444001 	sub	r4, r4, #1
    2b78:	e3740001 	cmn	r4, #1
    2b7c:	e2455004 	sub	r5, r5, #4
    2b80:	0a000022 	beq	2c10 <__call_exitprocs+0x100>
    2b84:	e3570000 	cmp	r7, #0
    2b88:	1afffff6 	bne	2b68 <__call_exitprocs+0x58>
    2b8c:	e5963004 	ldr	r3, [r6, #4]
    2b90:	e06a2005 	rsb	r2, r10, r5
    2b94:	e2433001 	sub	r3, r3, #1
    2b98:	e0862002 	add	r2, r6, r2
    2b9c:	e1530004 	cmp	r3, r4
    2ba0:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    2ba4:	13a01000 	movne	r1, #0
    2ba8:	05864004 	streq	r4, [r6, #4]
    2bac:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    2bb0:	e3530000 	cmp	r3, #0
    2bb4:	0affffee 	beq	2b74 <__call_exitprocs+0x64>
    2bb8:	e1a02418 	lsl	r2, r8, r4
    2bbc:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    2bc0:	e1120001 	tst	r2, r1
    2bc4:	e5969004 	ldr	r9, [r6, #4]
    2bc8:	0a000016 	beq	2c28 <__call_exitprocs+0x118>
    2bcc:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    2bd0:	e1120001 	tst	r2, r1
    2bd4:	1a000016 	bne	2c34 <__call_exitprocs+0x124>
    2bd8:	e59d0008 	ldr	r0, [sp, #8]
    2bdc:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    2be0:	e1a0e00f 	mov	lr, pc
    2be4:	e12fff13 	bx	r3
    2be8:	e5963004 	ldr	r3, [r6, #4]
    2bec:	e1530009 	cmp	r3, r9
    2bf0:	1affffd0 	bne	2b38 <__call_exitprocs+0x28>
    2bf4:	e59b3000 	ldr	r3, [r11]
    2bf8:	e1530006 	cmp	r3, r6
    2bfc:	1affffcd 	bne	2b38 <__call_exitprocs+0x28>
    2c00:	e2444001 	sub	r4, r4, #1
    2c04:	e3740001 	cmn	r4, #1
    2c08:	e2455004 	sub	r5, r5, #4
    2c0c:	1affffdc 	bne	2b84 <__call_exitprocs+0x74>
    2c10:	e59f1070 	ldr	r1, [pc, #112]	; 2c88 <__call_exitprocs+0x178>
    2c14:	e3510000 	cmp	r1, #0
    2c18:	1a000009 	bne	2c44 <__call_exitprocs+0x134>
    2c1c:	e28dd014 	add	sp, sp, #20
    2c20:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2c24:	e12fff1e 	bx	lr
    2c28:	e1a0e00f 	mov	lr, pc
    2c2c:	e12fff13 	bx	r3
    2c30:	eaffffec 	b	2be8 <__call_exitprocs+0xd8>
    2c34:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    2c38:	e1a0e00f 	mov	lr, pc
    2c3c:	e12fff13 	bx	r3
    2c40:	eaffffe8 	b	2be8 <__call_exitprocs+0xd8>
    2c44:	e5963004 	ldr	r3, [r6, #4]
    2c48:	e3530000 	cmp	r3, #0
    2c4c:	e5963000 	ldr	r3, [r6]
    2c50:	1a000008 	bne	2c78 <__call_exitprocs+0x168>
    2c54:	e3530000 	cmp	r3, #0
    2c58:	0a000006 	beq	2c78 <__call_exitprocs+0x168>
    2c5c:	e1a00006 	mov	r0, r6
    2c60:	e58b3000 	str	r3, [r11]
    2c64:	e320f000 	nop	{0}
    2c68:	e59b6000 	ldr	r6, [r11]
    2c6c:	e3560000 	cmp	r6, #0
    2c70:	1affffb5 	bne	2b4c <__call_exitprocs+0x3c>
    2c74:	eaffffe8 	b	2c1c <__call_exitprocs+0x10c>
    2c78:	e1a0b006 	mov	r11, r6
    2c7c:	e1a06003 	mov	r6, r3
    2c80:	eafffff9 	b	2c6c <__call_exitprocs+0x15c>
    2c84:	00002de8 	.word	0x00002de8
    2c88:	00000000 	.word	0x00000000

00002c8c <register_fini>:
    2c8c:	e92d4008 	push	{r3, lr}
    2c90:	e59f3010 	ldr	r3, [pc, #16]	; 2ca8 <register_fini+0x1c>
    2c94:	e3530000 	cmp	r3, #0
    2c98:	159f000c 	ldrne	r0, [pc, #12]	; 2cac <register_fini+0x20>
    2c9c:	1bfffefc 	blne	2894 <atexit>
    2ca0:	e8bd4008 	pop	{r3, lr}
    2ca4:	e12fff1e 	bx	lr
    2ca8:	00002e10 	.word	0x00002e10
    2cac:	00002cb0 	.word	0x00002cb0

00002cb0 <__libc_fini_array>:
    2cb0:	e92d4038 	push	{r3, r4, r5, lr}
    2cb4:	e59f5030 	ldr	r5, [pc, #48]	; 2cec <__libc_fini_array+0x3c>
    2cb8:	e59f4030 	ldr	r4, [pc, #48]	; 2cf0 <__libc_fini_array+0x40>
    2cbc:	e0654004 	rsb	r4, r5, r4
    2cc0:	e1b04144 	asrs	r4, r4, #2
    2cc4:	10855104 	addne	r5, r5, r4, lsl #2
    2cc8:	0a000004 	beq	2ce0 <__libc_fini_array+0x30>
    2ccc:	e5353004 	ldr	r3, [r5, #-4]!
    2cd0:	e1a0e00f 	mov	lr, pc
    2cd4:	e12fff13 	bx	r3
    2cd8:	e2544001 	subs	r4, r4, #1
    2cdc:	1afffffa 	bne	2ccc <__libc_fini_array+0x1c>
    2ce0:	eb00004a 	bl	2e10 <__libc_fini>
    2ce4:	e8bd4038 	pop	{r3, r4, r5, lr}
    2ce8:	e12fff1e 	bx	lr
    2cec:	00002e28 	.word	0x00002e28
    2cf0:	00002e2c 	.word	0x00002e2c

00002cf4 <__cs3_premain>:
    2cf4:	e92d4008 	push	{r3, lr}
    2cf8:	eb000017 	bl	2d5c <__libc_init_array>
    2cfc:	e59f3030 	ldr	r3, [pc, #48]	; 2d34 <__cs3_premain+0x40>
    2d00:	e3530000 	cmp	r3, #0
    2d04:	15930000 	ldrne	r0, [r3]
    2d08:	01a00003 	moveq	r0, r3
    2d0c:	e59f3024 	ldr	r3, [pc, #36]	; 2d38 <__cs3_premain+0x44>
    2d10:	e3530000 	cmp	r3, #0
    2d14:	15931000 	ldrne	r1, [r3]
    2d18:	01a01003 	moveq	r1, r3
    2d1c:	e3a02000 	mov	r2, #0
    2d20:	ebfff912 	bl	1170 <main>
    2d24:	e59f3010 	ldr	r3, [pc, #16]	; 2d3c <__cs3_premain+0x48>
    2d28:	e3530000 	cmp	r3, #0
    2d2c:	1bfffee0 	blne	28b4 <exit>
    2d30:	eafffffe 	b	2d30 <__cs3_premain+0x3c>
	...
    2d3c:	000028b4 	.word	0x000028b4

00002d40 <_exit>:
    2d40:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    2d44:	e3a00018 	mov	r0, #24
    2d48:	e59f1004 	ldr	r1, [pc, #4]	; 2d54 <_exit+0x14>
    2d4c:	ef123456 	svc	0x00123456
    2d50:	eafffffe 	b	2d50 <_exit+0x10>
    2d54:	00020026 	.word	0x00020026

00002d58 <__cs3_isr_interrupt>:
    2d58:	eafffffe 	b	2d58 <__cs3_isr_interrupt>

00002d5c <__libc_init_array>:
    2d5c:	e92d4070 	push	{r4, r5, r6, lr}
    2d60:	e59f506c 	ldr	r5, [pc, #108]	; 2dd4 <__libc_init_array+0x78>
    2d64:	e59f606c 	ldr	r6, [pc, #108]	; 2dd8 <__libc_init_array+0x7c>
    2d68:	e0656006 	rsb	r6, r5, r6
    2d6c:	e1b06146 	asrs	r6, r6, #2
    2d70:	12455004 	subne	r5, r5, #4
    2d74:	13a04000 	movne	r4, #0
    2d78:	0a000005 	beq	2d94 <__libc_init_array+0x38>
    2d7c:	e5b53004 	ldr	r3, [r5, #4]!
    2d80:	e2844001 	add	r4, r4, #1
    2d84:	e1a0e00f 	mov	lr, pc
    2d88:	e12fff13 	bx	r3
    2d8c:	e1560004 	cmp	r6, r4
    2d90:	1afffff9 	bne	2d7c <__libc_init_array+0x20>
    2d94:	e59f5040 	ldr	r5, [pc, #64]	; 2ddc <__libc_init_array+0x80>
    2d98:	e59f6040 	ldr	r6, [pc, #64]	; 2de0 <__libc_init_array+0x84>
    2d9c:	e0656006 	rsb	r6, r5, r6
    2da0:	eb000012 	bl	2df0 <_init>
    2da4:	e1b06146 	asrs	r6, r6, #2
    2da8:	12455004 	subne	r5, r5, #4
    2dac:	13a04000 	movne	r4, #0
    2db0:	0a000005 	beq	2dcc <__libc_init_array+0x70>
    2db4:	e5b53004 	ldr	r3, [r5, #4]!
    2db8:	e2844001 	add	r4, r4, #1
    2dbc:	e1a0e00f 	mov	lr, pc
    2dc0:	e12fff13 	bx	r3
    2dc4:	e1560004 	cmp	r6, r4
    2dc8:	1afffff9 	bne	2db4 <__libc_init_array+0x58>
    2dcc:	e8bd4070 	pop	{r4, r5, r6, lr}
    2dd0:	e12fff1e 	bx	lr
    2dd4:	00002e08 	.word	0x00002e08
    2dd8:	00002e08 	.word	0x00002e08
    2ddc:	00002e08 	.word	0x00002e08
    2de0:	00002e10 	.word	0x00002e10

Disassembly of section .rodata:

00002de8 <_global_impure_ptr>:
    2de8:	00031c78 00000043                       x...C...

00002df0 <_init>:
    2df0:	e1a0c00d 	mov	r12, sp
    2df4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2df8:	e24cb004 	sub	r11, r12, #4
    2dfc:	e24bd028 	sub	sp, r11, #40	; 0x28
    2e00:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2e04:	e12fff1e 	bx	lr

00002e08 <__init_array_start>:
    2e08:	00002c8c 	.word	0x00002c8c

00002e0c <__frame_dummy_init_array_entry>:
    2e0c:	00000208                                ....

00002e10 <__libc_fini>:
    2e10:	e1a0c00d 	mov	r12, sp
    2e14:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2e18:	e24cb004 	sub	r11, r12, #4
    2e1c:	e24bd028 	sub	sp, r11, #40	; 0x28
    2e20:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2e24:	e12fff1e 	bx	lr

00002e28 <__fini_array_start>:
    2e28:	000001c4 	.word	0x000001c4

00002e2c <__cs3_regions>:
	...
    2e38:	000320a8 	.word	0x000320a8
    2e3c:	00000050 	.word	0x00000050
