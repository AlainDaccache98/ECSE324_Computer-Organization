
P:/ECSE324/G12_Lab2/max_subroutine.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
			.text
			.global _start

_start: 
			LDR R0, N  	// R0 is given the value of the numvber of elements in the list
   0:	e59f003c 	ldr	r0, [pc, #60]	; 44 <N>
			LDR R1, =NUMBERS 			// R1 point to the list NUMBERS
   4:	e59f105c 	ldr	r1, [pc, #92]	; 68 <RESULT+0x4>
			LDR R2, [R1]		// Loadd the first element in NUMBERS assuming it is the current max
   8:	e5912000 	ldr	r2, [r1]
			BL FIND_MAX			// Go to FIND_MAX loop 
   c:	eb000002 	bl	1c <FIND_MAX>
			STR R2, RESULT		// Storing the max in R0
  10:	e58f204c 	str	r2, [pc, #76]	; 64 <RESULT>
			POP {LR}		// popping the values bacl to the registers
  14:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)

00000018 <STOP>:


STOP:
			B STOP
  18:	eafffffe 	b	18 <STOP>

0000001c <FIND_MAX>:
			
FIND_MAX:
			PUSH {LR}		// pushing the changes on the stack 
  1c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

00000020 <LOOP>:
LOOP:
			SUBS R0, R0, #1		// decrement the loop counter
  20:	e2500001 	subs	r0, r0, #1
			BEQ END			// exit the subroutine once counter reaches 
  24:	0a000005 	beq	40 <END>
			ADD R1, R1, #4 		// R0 points to next number in the list 
  28:	e2811004 	add	r1, r1, #4
			LDR R3, [R1] 		// R3 holds the next number in the list
  2c:	e5913000 	ldr	r3, [r1]
			CMP R2, R3 			// check if it is greater than the maximum
  30:	e1520003 	cmp	r2, r3
			BGE LOOP 			// if no, branch back to the loop
  34:	aafffff9 	bge	20 <LOOP>
			MOV R2, R3 			// if yes, update the current max
  38:	e1a02003 	mov	r2, r3
			B LOOP			// branch back to the loop
  3c:	eafffff7 	b	20 <LOOP>

00000040 <END>:

END: 		
			BX LR			// PC points to the instruction after the call
  40:	e12fff1e 	bx	lr

00000044 <N>:
  44:	00000007 	.word	0x00000007

00000048 <NUMBERS>:
  48:	00000004 	.word	0x00000004
  4c:	00000005 	.word	0x00000005
  50:	00000003 	.word	0x00000003
  54:	00000006 	.word	0x00000006
  58:	00000001 	.word	0x00000001
  5c:	00000009 	.word	0x00000009
  60:	00000002 	.word	0x00000002

00000064 <RESULT>:
  64:	00000000 	.word	0x00000000
  68:	00000048 	.word	0x00000048
