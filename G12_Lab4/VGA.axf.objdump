
P:/ECSE324/G12_Lab4/VGA.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 ac 0a 00 00 b0 0a 00 00 b4 0a 00 00     @...............
  30:	b8 0a 00 00 a8 0a 00 00 bc 0a 00 00 c0 0a 00 00     ................

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb00025a 	bl	a44 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000ba8 	.word	0x00000ba8

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000fe0 	.word	0x00000fe0

00000124 <__cs3_heap_start_ptr>:
 124:	00001008 	.word	0x00001008

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000fe8 	.word	0x00000fe8
 170:	00000feb 	.word	0x00000feb
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000fe8 	.word	0x00000fe8
 1bc:	00000fe8 	.word	0x00000fe8
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000fe8 	.word	0x00000fe8
 200:	00000000 	.word	0x00000000
 204:	00000b4c 	.word	0x00000b4c

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000b4c 	.word	0x00000b4c
 250:	00000fec 	.word	0x00000fec
 254:	00000ba8 	.word	0x00000ba8
 258:	00000000 	.word	0x00000000

0000025c <VGA_clear_pixelbuff_ASM>:
	.global VGA_write_byte_ASM
	.global VGA_draw_point_ASM

// Each pixel has location: address base + (x,y)offset
VGA_clear_pixelbuff_ASM:
	PUSH {R4-R5}	
 25c:	e92d0030 	push	{r4, r5}
	MOV R2, #0
 260:	e3a02000 	mov	r2, #0
	LDR R3, =VGA_PIXEL_BUF_BASE		// base address
 264:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
	MOV R0, #0
 268:	e3a00000 	mov	r0, #0

0000026c <PIXEL_LOOPX>:

PIXEL_LOOPX:						// iterate column by column
	MOV R1, #0
 26c:	e3a01000 	mov	r1, #0
	ADD R4, R3, R0, LSL #1			 // we LSL by 1 because address for x starts after the first bit
 270:	e0834080 	add	r4, r3, r0, lsl #1

00000274 <PIXEL_LOOPY>:

PIXEL_LOOPY:						// iterate row by row
	ADD R5, R4, R1, LSL #10			// we LSL by 10 because address for y starts at 10th bit position
 274:	e0845501 	add	r5, r4, r1, lsl #10
	
	STRH R2, [R5]
 278:	e1c520b0 	strh	r2, [r5]
	
	ADD R1, R1, #1
 27c:	e2811001 	add	r1, r1, #1
	CMP R1, #240				
 280:	e35100f0 	cmp	r1, #240	; 0xf0
	BLT PIXEL_LOOPY					// still in same column
 284:	bafffffa 	blt	274 <PIXEL_LOOPY>
	
	ADD R0, R0, #1
 288:	e2800001 	add	r0, r0, #1
	CMP R0, #320		
 28c:	e3500d05 	cmp	r0, #320	; 0x140
	BLT PIXEL_LOOPX					// go to next row
 290:	bafffff5 	blt	26c <PIXEL_LOOPX>

	POP {R4-R5}
 294:	e8bd0030 	pop	{r4, r5}
	BX LR
 298:	e12fff1e 	bx	lr

0000029c <VGA_clear_charbuff_ASM>:

VGA_clear_charbuff_ASM:
	PUSH {R4-R5}	
 29c:	e92d0030 	push	{r4, r5}
	MOV R2, #0
 2a0:	e3a02000 	mov	r2, #0
	LDR R3, =VGA_CHAR_BUF_BASE
 2a4:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
	MOV R0, #0
 2a8:	e3a00000 	mov	r0, #0

000002ac <CHAR_LOOPX>:

CHAR_LOOPX:
	MOV R1, #0
 2ac:	e3a01000 	mov	r1, #0
	ADD R4, R3, R0, LSL #1 
 2b0:	e0834080 	add	r4, r3, r0, lsl #1

000002b4 <CHAR_LOOPY>:

CHAR_LOOPY:				
	ADD R5, R4, R1, LSL #7 
 2b4:	e0845381 	add	r5, r4, r1, lsl #7
							
	STRH R2, [R5]
 2b8:	e1c520b0 	strh	r2, [r5]
	
	ADD R1, R1, #1
 2bc:	e2811001 	add	r1, r1, #1
	CMP R1, #60
 2c0:	e351003c 	cmp	r1, #60	; 0x3c
	BLT CHAR_LOOPY
 2c4:	bafffffa 	blt	2b4 <CHAR_LOOPY>
	
	ADD R0, R0, #1
 2c8:	e2800001 	add	r0, r0, #1
	CMP R0, #80
 2cc:	e3500050 	cmp	r0, #80	; 0x50
	BLT CHAR_LOOPX
 2d0:	bafffff5 	blt	2ac <CHAR_LOOPX>

	POP {R4-R5}
 2d4:	e8bd0030 	pop	{r4, r5}
	BX LR
 2d8:	e12fff1e 	bx	lr

000002dc <VGA_write_byte_ASM>:

VGA_write_byte_ASM:					//R0, R1, R2 are x, y and char

	PUSH {R3-R7}
 2dc:	e92d00f8 	push	{r3, r4, r5, r6, r7}
	CMP R0, #79
 2e0:	e350004f 	cmp	r0, #79	; 0x4f
	BXGT LR
 2e4:	c12fff1e 	bxgt	lr
	CMP R1, #59
 2e8:	e351003b 	cmp	r1, #59	; 0x3b
	BXGT LR
 2ec:	c12fff1e 	bxgt	lr
	
	LDR R3, =VGA_CHAR_BUF_BASE
 2f0:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
	ADD R3, R3, R0
 2f4:	e0833000 	add	r3, r3, r0
	LSL R1, R1, #7
 2f8:	e1a01381 	lsl	r1, r1, #7


	ADD R3, R3, R1					//R3 contains the address where we want to inject stuff
 2fc:	e0833001 	add	r3, r3, r1
	LSR R4, R2, #4					//get most significant hex in R4					
 300:	e1a04222 	lsr	r4, r2, #4
	LSL R6, R4, #4					//get least significant hex in R5
 304:	e1a06204 	lsl	r6, r4, #4
	SUB R5, R2, R6					//the least significant hex in R5
 308:	e0425006 	sub	r5, r2, r6
	
	CMP R4, #9
 30c:	e3540009 	cmp	r4, #9
	ADDGT R4, R4, #7
 310:	c2844007 	addgt	r4, r4, #7
	CMP R5, #9	
 314:	e3550009 	cmp	r5, #9
	ADDGT R5, R5, #7
 318:	c2855007 	addgt	r5, r5, #7
	ADD R4, R4, #48
 31c:	e2844030 	add	r4, r4, #48	; 0x30
	ADD R5, R5, #48
 320:	e2855030 	add	r5, r5, #48	; 0x30
	
	STRB R4, [R3]
 324:	e5c34000 	strb	r4, [r3]
	ADD R3, R3, #1
 328:	e2833001 	add	r3, r3, #1
	STRB R5, [R3]
 32c:	e5c35000 	strb	r5, [r3]
	POP {R3-R7}
 330:	e8bd00f8 	pop	{r3, r4, r5, r6, r7}
	BX LR
 334:	e12fff1e 	bx	lr

00000338 <VGA_write_char_ASM>:
	
VGA_write_char_ASM:

	LDR R3, =79  
 338:	e3a0304f 	mov	r3, #79	; 0x4f
	CMP R0, #0
 33c:	e3500000 	cmp	r0, #0
	BXLT LR
 340:	b12fff1e 	bxlt	lr
	CMP R1, #0
 344:	e3510000 	cmp	r1, #0
	BXLT LR
 348:	b12fff1e 	bxlt	lr
	CMP R0, R3
 34c:	e1500003 	cmp	r0, r3
	BXGT LR
 350:	c12fff1e 	bxgt	lr
	CMP R1, #59
 354:	e351003b 	cmp	r1, #59	; 0x3b
	BXGT LR
 358:	c12fff1e 	bxgt	lr
	
	LDR R3, =VGA_CHAR_BUF_BASE		//we create pointer to addre of vga char buff base
 35c:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
	ADD R3, R3, R0					//shift the x, y by correct amount, to add to base addre
 360:	e0833000 	add	r3, r3, r0
	ADD R3, R3, R1, LSL #7			//so we can write to the correct mem address/grid position
 364:	e0833381 	add	r3, r3, r1, lsl #7
	STRB R2, [R3]					//we store as a byte
 368:	e5c32000 	strb	r2, [r3]
	BX LR
 36c:	e12fff1e 	bx	lr

00000370 <VGA_draw_point_ASM>:

VGA_draw_point_ASM:

	LDR R3, =319  //these lines below check that were still in the grid!! Otherwise we branch out
 370:	e59f3040 	ldr	r3, [pc, #64]	; 3b8 <HEX_ASCII+0x10>
	CMP R0, #0
 374:	e3500000 	cmp	r0, #0
	BXLT LR
 378:	b12fff1e 	bxlt	lr
	CMP R1, #0
 37c:	e3510000 	cmp	r1, #0
	BXLT LR
 380:	b12fff1e 	bxlt	lr
	CMP R0, R3
 384:	e1500003 	cmp	r0, r3
	BXGT LR
 388:	c12fff1e 	bxgt	lr
	CMP R1, #239
 38c:	e35100ef 	cmp	r1, #239	; 0xef
	BXGT LR
 390:	c12fff1e 	bxgt	lr
	
	LDR R3, =VGA_PIXEL_BUF_BASE // we load address/create pointer
 394:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
	ADD R3, R3, R0, LSL #1		//add x, y position into address, to get correct grid
 398:	e0833080 	add	r3, r3, r0, lsl #1
	ADD R3, R3, R1, LSL #10		//then we store the data/pixel color as half word into the right/current grid position
 39c:	e0833501 	add	r3, r3, r1, lsl #10
	STRH R2, [R3]
 3a0:	e1c320b0 	strh	r2, [r3]
	BX LR
 3a4:	e12fff1e 	bx	lr

000003a8 <HEX_ASCII>:
 3a8:	33323130 	.word	0x33323130
 3ac:	37363534 	.word	0x37363534
 3b0:	42413938 	.word	0x42413938
 3b4:	46454443 	.word	0x46454443
	STRB R2, [R3]					//we store as a byte
	BX LR

VGA_draw_point_ASM:

	LDR R3, =319  //these lines below check that were still in the grid!! Otherwise we branch out
 3b8:	0000013f 	.word	0x0000013f

000003bc <test_char>:
#include "./drivers/inc/vga.h"
#include "./drivers/inc/pushbuttons.h"
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/ps2_keyboard.h"
#include "./drivers/inc/audio.h"
void test_char(){
 3bc:	e92d4800 	push	{r11, lr}
 3c0:	e28db004 	add	r11, sp, #4
 3c4:	e24dd010 	sub	sp, sp, #16
	int x,y;
	char c = 0;
 3c8:	e3a03000 	mov	r3, #0
 3cc:	e54b300d 	strb	r3, [r11, #-13]

	for(y=0 ; y<=59 ; y++)
 3d0:	e3a03000 	mov	r3, #0
 3d4:	e50b300c 	str	r3, [r11, #-12]
 3d8:	ea000013 	b	42c <test_char+0x70>
		for(x=0 ; x<=79 ; x++)
 3dc:	e3a03000 	mov	r3, #0
 3e0:	e50b3008 	str	r3, [r11, #-8]
 3e4:	ea00000a 	b	414 <test_char+0x58>
			VGA_write_char_ASM(x,y,c++);
 3e8:	e55b300d 	ldrb	r3, [r11, #-13]
 3ec:	e55b200d 	ldrb	r2, [r11, #-13]
 3f0:	e2822001 	add	r2, r2, #1
 3f4:	e54b200d 	strb	r2, [r11, #-13]
 3f8:	e51b0008 	ldr	r0, [r11, #-8]
 3fc:	e51b100c 	ldr	r1, [r11, #-12]
 400:	e1a02003 	mov	r2, r3
 404:	ebffffcb 	bl	338 <VGA_write_char_ASM>
void test_char(){
	int x,y;
	char c = 0;

	for(y=0 ; y<=59 ; y++)
		for(x=0 ; x<=79 ; x++)
 408:	e51b3008 	ldr	r3, [r11, #-8]
 40c:	e2833001 	add	r3, r3, #1
 410:	e50b3008 	str	r3, [r11, #-8]
 414:	e51b3008 	ldr	r3, [r11, #-8]
 418:	e353004f 	cmp	r3, #79	; 0x4f
 41c:	dafffff1 	ble	3e8 <test_char+0x2c>
#include "./drivers/inc/audio.h"
void test_char(){
	int x,y;
	char c = 0;

	for(y=0 ; y<=59 ; y++)
 420:	e51b300c 	ldr	r3, [r11, #-12]
 424:	e2833001 	add	r3, r3, #1
 428:	e50b300c 	str	r3, [r11, #-12]
 42c:	e51b300c 	ldr	r3, [r11, #-12]
 430:	e353003b 	cmp	r3, #59	; 0x3b
 434:	daffffe8 	ble	3dc <test_char+0x20>
		for(x=0 ; x<=79 ; x++)
			VGA_write_char_ASM(x,y,c++);
}
 438:	e24bd004 	sub	sp, r11, #4
 43c:	e8bd8800 	pop	{r11, pc}

00000440 <test_byte>:

void test_byte(){
 440:	e92d4800 	push	{r11, lr}
 444:	e28db004 	add	r11, sp, #4
 448:	e24dd010 	sub	sp, sp, #16
	int x,y;
	char c = 0;
 44c:	e3a03000 	mov	r3, #0
 450:	e54b300d 	strb	r3, [r11, #-13]

	for(y=0 ; y<=59 ; y++)
 454:	e3a03000 	mov	r3, #0
 458:	e50b300c 	str	r3, [r11, #-12]
 45c:	ea000013 	b	4b0 <test_byte+0x70>
		for(x=0 ; x<=79 ; x+=3)
 460:	e3a03000 	mov	r3, #0
 464:	e50b3008 	str	r3, [r11, #-8]
 468:	ea00000a 	b	498 <test_byte+0x58>
			VGA_write_byte_ASM(x,y,c++);
 46c:	e55b300d 	ldrb	r3, [r11, #-13]
 470:	e55b200d 	ldrb	r2, [r11, #-13]
 474:	e2822001 	add	r2, r2, #1
 478:	e54b200d 	strb	r2, [r11, #-13]
 47c:	e51b0008 	ldr	r0, [r11, #-8]
 480:	e51b100c 	ldr	r1, [r11, #-12]
 484:	e1a02003 	mov	r2, r3
 488:	ebffff93 	bl	2dc <VGA_write_byte_ASM>
void test_byte(){
	int x,y;
	char c = 0;

	for(y=0 ; y<=59 ; y++)
		for(x=0 ; x<=79 ; x+=3)
 48c:	e51b3008 	ldr	r3, [r11, #-8]
 490:	e2833003 	add	r3, r3, #3
 494:	e50b3008 	str	r3, [r11, #-8]
 498:	e51b3008 	ldr	r3, [r11, #-8]
 49c:	e353004f 	cmp	r3, #79	; 0x4f
 4a0:	dafffff1 	ble	46c <test_byte+0x2c>

void test_byte(){
	int x,y;
	char c = 0;

	for(y=0 ; y<=59 ; y++)
 4a4:	e51b300c 	ldr	r3, [r11, #-12]
 4a8:	e2833001 	add	r3, r3, #1
 4ac:	e50b300c 	str	r3, [r11, #-12]
 4b0:	e51b300c 	ldr	r3, [r11, #-12]
 4b4:	e353003b 	cmp	r3, #59	; 0x3b
 4b8:	daffffe8 	ble	460 <test_byte+0x20>
		for(x=0 ; x<=79 ; x+=3)
			VGA_write_byte_ASM(x,y,c++);
}
 4bc:	e24bd004 	sub	sp, r11, #4
 4c0:	e8bd8800 	pop	{r11, pc}

000004c4 <test_pixel>:


void test_pixel(){
 4c4:	e92d4800 	push	{r11, lr}
 4c8:	e28db004 	add	r11, sp, #4
 4cc:	e24dd010 	sub	sp, sp, #16
	int x,y;
	unsigned short colour = 0;
 4d0:	e3a03000 	mov	r3, #0
 4d4:	e14b30be 	strh	r3, [r11, #-14]

	for(y=0 ; y<=239 ; y++)
 4d8:	e3a03000 	mov	r3, #0
 4dc:	e50b300c 	str	r3, [r11, #-12]
 4e0:	ea000015 	b	53c <test_pixel+0x78>
		for(x=0 ; x<=319 ; x++)
 4e4:	e3a03000 	mov	r3, #0
 4e8:	e50b3008 	str	r3, [r11, #-8]
 4ec:	ea00000b 	b	520 <test_pixel+0x5c>
			VGA_draw_point_ASM(x,y,colour++);
 4f0:	e15b30be 	ldrh	r3, [r11, #-14]
 4f4:	e15b20be 	ldrh	r2, [r11, #-14]
 4f8:	e2822001 	add	r2, r2, #1
 4fc:	e14b20be 	strh	r2, [r11, #-14]
 500:	e6bf3073 	sxth	r3, r3
 504:	e51b0008 	ldr	r0, [r11, #-8]
 508:	e51b100c 	ldr	r1, [r11, #-12]
 50c:	e1a02003 	mov	r2, r3
 510:	ebffff96 	bl	370 <VGA_draw_point_ASM>
void test_pixel(){
	int x,y;
	unsigned short colour = 0;

	for(y=0 ; y<=239 ; y++)
		for(x=0 ; x<=319 ; x++)
 514:	e51b3008 	ldr	r3, [r11, #-8]
 518:	e2833001 	add	r3, r3, #1
 51c:	e50b3008 	str	r3, [r11, #-8]
 520:	e51b2008 	ldr	r2, [r11, #-8]
 524:	e300313f 	movw	r3, #319	; 0x13f
 528:	e1520003 	cmp	r2, r3
 52c:	daffffef 	ble	4f0 <test_pixel+0x2c>

void test_pixel(){
	int x,y;
	unsigned short colour = 0;

	for(y=0 ; y<=239 ; y++)
 530:	e51b300c 	ldr	r3, [r11, #-12]
 534:	e2833001 	add	r3, r3, #1
 538:	e50b300c 	str	r3, [r11, #-12]
 53c:	e51b300c 	ldr	r3, [r11, #-12]
 540:	e35300ef 	cmp	r3, #239	; 0xef
 544:	daffffe6 	ble	4e4 <test_pixel+0x20>
		for(x=0 ; x<=319 ; x++)
			VGA_draw_point_ASM(x,y,colour++);
}
 548:	e24bd004 	sub	sp, r11, #4
 54c:	e8bd8800 	pop	{r11, pc}

00000550 <main>:

int main(){
 550:	e92d4800 	push	{r11, lr}
 554:	e28db004 	add	r11, sp, #4
 558:	e24dd010 	sub	sp, sp, #16
*/
	// This is Part 3
	
	int i,x;				// i keeps track of the number of samples
							// x 
	int hi = 0x00FFFFFF; 	//hi signal
 55c:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
 560:	e50b3010 	str	r3, [r11, #-16]
	int lo = 0;				//lo signal
 564:	e3a03000 	mov	r3, #0
 568:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	x = hi; 				//we initially want to assert the hi signal
 56c:	e51b3010 	ldr	r3, [r11, #-16]
 570:	e50b300c 	str	r3, [r11, #-12]
 574:	ea000000 	b	57c <main+0x2c>
			x=lo;
		}
		else if(x==lo){
			x=hi;
		}
	}
 578:	e1a00000 	nop			; (mov r0, r0)
							// x 
	int hi = 0x00FFFFFF; 	//hi signal
	int lo = 0;				//lo signal
	x = hi; 				//we initially want to assert the hi signal
	while(1){
		for(i=0 ; i < 240;){		 // we want to reach 100Hz, that's why we need that many samples
 57c:	e3a03000 	mov	r3, #0
 580:	e50b3008 	str	r3, [r11, #-8]
 584:	ea000007 	b	5a8 <main+0x58>
									//
			if(audio_write_ASM(x))
 588:	e51b000c 	ldr	r0, [r11, #-12]
 58c:	eb00004b 	bl	6c0 <audio_write_ASM>
 590:	e1a03000 	mov	r3, r0
 594:	e3530000 	cmp	r3, #0
 598:	0a000002 	beq	5a8 <main+0x58>
				i++;
 59c:	e51b3008 	ldr	r3, [r11, #-8]
 5a0:	e2833001 	add	r3, r3, #1
 5a4:	e50b3008 	str	r3, [r11, #-8]
							// x 
	int hi = 0x00FFFFFF; 	//hi signal
	int lo = 0;				//lo signal
	x = hi; 				//we initially want to assert the hi signal
	while(1){
		for(i=0 ; i < 240;){		 // we want to reach 100Hz, that's why we need that many samples
 5a8:	e51b3008 	ldr	r3, [r11, #-8]
 5ac:	e35300ef 	cmp	r3, #239	; 0xef
 5b0:	dafffff4 	ble	588 <main+0x38>
									//
			if(audio_write_ASM(x))
				i++;
		}
		if(x==hi){ 				//the if blocks switch the signal from hi to lo and vicer versa
 5b4:	e51b200c 	ldr	r2, [r11, #-12]
 5b8:	e51b3010 	ldr	r3, [r11, #-16]
 5bc:	e1520003 	cmp	r2, r3
 5c0:	1a000002 	bne	5d0 <main+0x80>
			x=lo;
 5c4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 5c8:	e50b300c 	str	r3, [r11, #-12]
		}
		else if(x==lo){
			x=hi;
		}
	}
 5cc:	eaffffe9 	b	578 <main+0x28>
				i++;
		}
		if(x==hi){ 				//the if blocks switch the signal from hi to lo and vicer versa
			x=lo;
		}
		else if(x==lo){
 5d0:	e51b200c 	ldr	r2, [r11, #-12]
 5d4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 5d8:	e1520003 	cmp	r2, r3
 5dc:	1affffe5 	bne	578 <main+0x28>
			x=hi;
 5e0:	e51b3010 	ldr	r3, [r11, #-16]
 5e4:	e50b300c 	str	r3, [r11, #-12]
		}
	}
 5e8:	eaffffe2 	b	578 <main+0x28>

000005ec <read_PB_data_ASM>:
		.global PB_clear_edgecap_ASM
		.global enable_PB_INT_ASM
		.global disable_PB_INT_ASM

read_PB_data_ASM:					//only access the pushbutton data register
		LDR R1, =PUSH_BUTTON_DATA	
 5ec:	e59f1080 	ldr	r1, [pc, #128]	; 674 <disable_PB_INT_ASM+0x14>
		LDR R0, [R1]				//load the contents of the pushbutton register into R1
 5f0:	e5910000 	ldr	r0, [r1]
		BX LR						//USE R0 to pass arguments back		
 5f4:	e12fff1e 	bx	lr

000005f8 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:				//R0 contains which button to check, hot-one encoding
		LDR R1, =PUSH_BUTTON_DATA	
 5f8:	e59f1074 	ldr	r1, [pc, #116]	; 674 <disable_PB_INT_ASM+0x14>
		LDR R2, [R1]				//load contents of register into R2
 5fc:	e5912000 	ldr	r2, [r1]
		AND R2, R2, R0
 600:	e0022000 	and	r2, r2, r0
		CMP R2, R0
 604:	e1520000 	cmp	r2, r0
		MOVEQ R0, #1				//True if equal
 608:	03a00001 	moveq	r0, #1
		MOVNE R0, #0				//false, the button isnt pressed
 60c:	13a00000 	movne	r0, #0
		BX LR
 610:	e12fff1e 	bx	lr

00000614 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:				//no input, only access edgecapture register
		LDR R1, =PUSH_BUTTON_EDGE	
 614:	e59f105c 	ldr	r1, [pc, #92]	; 678 <disable_PB_INT_ASM+0x18>
		LDR R0, [R1]				//load the contents of the pushbutton register into R1
 618:	e5910000 	ldr	r0, [r1]
		AND R0, R0, #0xF			//Get only edge cap bits
 61c:	e200000f 	and	r0, r0, #15
		BX LR						//USE R0 to pass arguments back		
 620:	e12fff1e 	bx	lr

00000624 <PB_edgecap_is_pressed_ASM>:
		
PB_edgecap_is_pressed_ASM:			//R0 contains which button to check, hot-one encoding
		LDR R1, =PUSH_BUTTON_EDGE	
 624:	e59f104c 	ldr	r1, [pc, #76]	; 678 <disable_PB_INT_ASM+0x18>
		LDR R2, [R1]				//load contents of register into R2
 628:	e5912000 	ldr	r2, [r1]
		AND R2, R2, R0
 62c:	e0022000 	and	r2, r2, r0
		CMP R2, R0
 630:	e1520000 	cmp	r2, r0
		MOVEQ R0, #1				//True if equal
 634:	03a00001 	moveq	r0, #1
		MOVNE R0, #0				//false, the button isnt pressed
 638:	13a00000 	movne	r0, #0
		BX LR
 63c:	e12fff1e 	bx	lr

00000640 <PB_clear_edgecap_ASM>:

PB_clear_edgecap_ASM:				//R0 contains which pushbutton
		LDR R1, =PUSH_BUTTON_EDGE
 640:	e59f1030 	ldr	r1, [pc, #48]	; 678 <disable_PB_INT_ASM+0x18>
		MOV R2, R0					//storing any value in edgecap will reset, p.21 (anything but #0) would work
 644:	e1a02000 	mov	r2, r0
		STR R2, [R1]
 648:	e5812000 	str	r2, [r1]
		BX LR
 64c:	e12fff1e 	bx	lr

00000650 <enable_PB_INT_ASM>:

enable_PB_INT_ASM:					//R0 contains which button to enable, hot-one encoding
		LDR R1, =PUSH_BUTTON_MASK
 650:	e59f1024 	ldr	r1, [pc, #36]	; 67c <disable_PB_INT_ASM+0x1c>
		AND R2, R0, #0xF			//since pushbuttons has only 4 digits that are used, use 0xF
 654:	e200200f 	and	r2, r0, #15
		STR R2, [R1]				//store it back into location
 658:	e5812000 	str	r2, [r1]
		BX LR
 65c:	e12fff1e 	bx	lr

00000660 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:					//R0 is hot-one encoding of which button to disable
		LDR R1, =PUSH_BUTTON_MASK	//load mask location
 660:	e59f1014 	ldr	r1, [pc, #20]	; 67c <disable_PB_INT_ASM+0x1c>
		LDR R2, [R1]				//load mask bits
 664:	e5912000 	ldr	r2, [r1]
		BIC R2, R2, R0				//AND on the complement of R0
 668:	e1c22000 	bic	r2, r2, r0
		STR R2, [R1]				//store it back into the mask
 66c:	e5812000 	str	r2, [r1]
		BX LR
 670:	e12fff1e 	bx	lr
		.global PB_clear_edgecap_ASM
		.global enable_PB_INT_ASM
		.global disable_PB_INT_ASM

read_PB_data_ASM:					//only access the pushbutton data register
		LDR R1, =PUSH_BUTTON_DATA	
 674:	ff200050 	.word	0xff200050
		MOVEQ R0, #1				//True if equal
		MOVNE R0, #0				//false, the button isnt pressed
		BX LR

read_PB_edgecap_ASM:				//no input, only access edgecapture register
		LDR R1, =PUSH_BUTTON_EDGE	
 678:	ff20005c 	.word	0xff20005c
		MOV R2, R0					//storing any value in edgecap will reset, p.21 (anything but #0) would work
		STR R2, [R1]
		BX LR

enable_PB_INT_ASM:					//R0 contains which button to enable, hot-one encoding
		LDR R1, =PUSH_BUTTON_MASK
 67c:	ff200058 	.word	0xff200058

00000680 <read_slider_switches_ASM>:
		.text
		.equ SW_BASE, 0xFF200040
		.global read_slider_switches_ASM

read_slider_switches_ASM:
		LDR R1, =SW_BASE
 680:	e59f1004 	ldr	r1, [pc, #4]	; 68c <read_slider_switches_ASM+0xc>
		LDR R0, [R1]
 684:	e5910000 	ldr	r0, [r1]
		BX LR
 688:	e12fff1e 	bx	lr
		.text
		.equ SW_BASE, 0xFF200040
		.global read_slider_switches_ASM

read_slider_switches_ASM:
		LDR R1, =SW_BASE
 68c:	ff200040 	.word	0xff200040

00000690 <read_PS2_data_ASM>:
	.text
	.global read_PS2_data_ASM

read_PS2_data_ASM:
	MOV R1, #0x8000	//16th bit
 690:	e3a01902 	mov	r1, #32768	; 0x8000
	LDR R3, =0xFF200100
 694:	e59f3020 	ldr	r3, [pc, #32]	; 6bc <read_PS2_data_ASM+0x2c>
	LDR R4, [R3]
 698:	e5934000 	ldr	r4, [r3]
	MOV R5, #0xFF	//last byte
 69c:	e3a050ff 	mov	r5, #255	; 0xff
	TST R4, R1
 6a0:	e1140001 	tst	r4, r1
	MOVEQ R0, #0
 6a4:	03a00000 	moveq	r0, #0
	BXEQ LR
 6a8:	012fff1e 	bxeq	lr
	AND R6, R4, R5	//and data with FF to get last 8 bits
 6ac:	e0046005 	and	r6, r4, r5
	STRB R6, [R0]	//store data at char pointer
 6b0:	e5c06000 	strb	r6, [r0]
	MOV R0, #1	//return 1 to denote valid data
 6b4:	e3a00001 	mov	r0, #1
	BX LR
 6b8:	e12fff1e 	bx	lr
	.text
	.global read_PS2_data_ASM

read_PS2_data_ASM:
	MOV R1, #0x8000	//16th bit
	LDR R3, =0xFF200100
 6bc:	ff200100 	.word	0xff200100

000006c0 <audio_write_ASM>:
	.global audio_write_ASM

audio_write_ASM:
			
			
			PUSH {R4-R12} 					//saves the state of the system
 6c0:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, r12}
			LDR R1, = L_FIFO 				//loads the address of the data register for the left fifo
 6c4:	e59f1040 	ldr	r1, [pc, #64]	; 70c <audio_write_ASM+0x4c>
			LDR R2, = R_FIFO 				//loads the address of the data register for the right fifo
 6c8:	e59f2040 	ldr	r2, [pc, #64]	; 710 <audio_write_ASM+0x50>
			LDR R3, = FIFO 					//loads the address of the data register for the fifospace
 6cc:	e59f3040 	ldr	r3, [pc, #64]	; 714 <audio_write_ASM+0x54>

			LDRB R4, [R3,#2] 				//loads the value of WSRC onto R4
 6d0:	e5d34002 	ldrb	r4, [r3, #2]
			LDRB R5, [R3, #3] 				//loads the value of WSLC onto R5
 6d4:	e5d35003 	ldrb	r5, [r3, #3]

			CMP R4, #0 						//checks to see if the fifos are full
 6d8:	e3540000 	cmp	r4, #0
			MOVEQ R0, #0 					// if yes, the subroutine returns 0 and branches back
 6dc:	03a00000 	moveq	r0, #0
			POPEQ {R4-R12}
 6e0:	08bd1ff0 	popeq	{r4, r5, r6, r7, r8, r9, r10, r11, r12}
			BXEQ LR
 6e4:	012fff1e 	bxeq	lr
			CMP R5, #0
 6e8:	e3550000 	cmp	r5, #0
			MOVEQ R0, #0
 6ec:	03a00000 	moveq	r0, #0
			POPEQ {R4-R12}
 6f0:	08bd1ff0 	popeq	{r4, r5, r6, r7, r8, r9, r10, r11, r12}
			BXEQ LR
 6f4:	012fff1e 	bxeq	lr
			STR R0, [R1] 					// If the fifos are not full 
 6f8:	e5810000 	str	r0, [r1]
			STR R0, [R2]					// store values in them if not full
 6fc:	e5820000 	str	r0, [r2]

			MOV R0, #1 						// the subroutine returns 1 if fifos not full
 700:	e3a00001 	mov	r0, #1
			POP {R4-R12}					// update system state
 704:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, r12}
			BX LR
 708:	e12fff1e 	bx	lr

audio_write_ASM:
			
			
			PUSH {R4-R12} 					//saves the state of the system
			LDR R1, = L_FIFO 				//loads the address of the data register for the left fifo
 70c:	ff203048 	.word	0xff203048
			LDR R2, = R_FIFO 				//loads the address of the data register for the right fifo
 710:	ff20304c 	.word	0xff20304c
			LDR R3, = FIFO 					//loads the address of the data register for the fifospace
 714:	ff203044 	.word	0xff203044

00000718 <atexit>:
 718:	e1a01000 	mov	r1, r0
 71c:	e3a00000 	mov	r0, #0
 720:	e92d4008 	push	{r3, lr}
 724:	e1a02000 	mov	r2, r0
 728:	e1a03000 	mov	r3, r0
 72c:	eb00000e 	bl	76c <__register_exitproc>
 730:	e8bd4008 	pop	{r3, lr}
 734:	e12fff1e 	bx	lr

00000738 <exit>:
 738:	e92d4008 	push	{r3, lr}
 73c:	e3a01000 	mov	r1, #0
 740:	e1a04000 	mov	r4, r0
 744:	eb000045 	bl	860 <__call_exitprocs>
 748:	e59f3018 	ldr	r3, [pc, #24]	; 768 <exit+0x30>
 74c:	e5930000 	ldr	r0, [r3]
 750:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 754:	e3530000 	cmp	r3, #0
 758:	11a0e00f 	movne	lr, pc
 75c:	112fff13 	bxne	r3
 760:	e1a00004 	mov	r0, r4
 764:	eb0000c9 	bl	a90 <_exit>
 768:	00000b50 	.word	0x00000b50

0000076c <__register_exitproc>:
 76c:	e59fc0e4 	ldr	r12, [pc, #228]	; 858 <__register_exitproc+0xec>
 770:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 774:	e59c4000 	ldr	r4, [r12]
 778:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 77c:	e35c0000 	cmp	r12, #0
 780:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 784:	e59c5004 	ldr	r5, [r12, #4]
 788:	0584c148 	streq	r12, [r4, #328]	; 0x148
 78c:	e355001f 	cmp	r5, #31
 790:	e24dd010 	sub	sp, sp, #16
 794:	e1a06000 	mov	r6, r0
 798:	da000015 	ble	7f4 <__register_exitproc+0x88>
 79c:	e59f00b8 	ldr	r0, [pc, #184]	; 85c <__register_exitproc+0xf0>
 7a0:	e3500000 	cmp	r0, #0
 7a4:	1a000001 	bne	7b0 <__register_exitproc+0x44>
 7a8:	e3e00000 	mvn	r0, #0
 7ac:	ea000018 	b	814 <__register_exitproc+0xa8>
 7b0:	e3a00e19 	mov	r0, #400	; 0x190
 7b4:	e58d100c 	str	r1, [sp, #12]
 7b8:	e58d2008 	str	r2, [sp, #8]
 7bc:	e58d3004 	str	r3, [sp, #4]
 7c0:	e320f000 	nop	{0}
 7c4:	e250c000 	subs	r12, r0, #0
 7c8:	e59d100c 	ldr	r1, [sp, #12]
 7cc:	e59d2008 	ldr	r2, [sp, #8]
 7d0:	e59d3004 	ldr	r3, [sp, #4]
 7d4:	0afffff3 	beq	7a8 <__register_exitproc+0x3c>
 7d8:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 7dc:	e3a00000 	mov	r0, #0
 7e0:	e58c0004 	str	r0, [r12, #4]
 7e4:	e58c5000 	str	r5, [r12]
 7e8:	e584c148 	str	r12, [r4, #328]	; 0x148
 7ec:	e58c0188 	str	r0, [r12, #392]	; 0x188
 7f0:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 7f4:	e3560000 	cmp	r6, #0
 7f8:	e59c4004 	ldr	r4, [r12, #4]
 7fc:	1a000007 	bne	820 <__register_exitproc+0xb4>
 800:	e2843002 	add	r3, r4, #2
 804:	e2844001 	add	r4, r4, #1
 808:	e78c1103 	str	r1, [r12, r3, lsl #2]
 80c:	e58c4004 	str	r4, [r12, #4]
 810:	e3a00000 	mov	r0, #0
 814:	e28dd010 	add	sp, sp, #16
 818:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 81c:	e12fff1e 	bx	lr
 820:	e3a00001 	mov	r0, #1
 824:	e1a00410 	lsl	r0, r0, r4
 828:	e08c8104 	add	r8, r12, r4, lsl #2
 82c:	e3560002 	cmp	r6, #2
 830:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 834:	e5883108 	str	r3, [r8, #264]	; 0x108
 838:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 83c:	e1877000 	orr	r7, r7, r0
 840:	01830000 	orreq	r0, r3, r0
 844:	e1a05008 	mov	r5, r8
 848:	e5882088 	str	r2, [r8, #136]	; 0x88
 84c:	e58c7188 	str	r7, [r12, #392]	; 0x188
 850:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 854:	eaffffe9 	b	800 <__register_exitproc+0x94>
 858:	00000b50 	.word	0x00000b50
 85c:	00000000 	.word	0x00000000

00000860 <__call_exitprocs>:
 860:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 864:	e59f3168 	ldr	r3, [pc, #360]	; 9d4 <__call_exitprocs+0x174>
 868:	e5933000 	ldr	r3, [r3]
 86c:	e24dd014 	sub	sp, sp, #20
 870:	e58d3004 	str	r3, [sp, #4]
 874:	e2833f52 	add	r3, r3, #328	; 0x148
 878:	e58d0008 	str	r0, [sp, #8]
 87c:	e58d300c 	str	r3, [sp, #12]
 880:	e1a07001 	mov	r7, r1
 884:	e3a08001 	mov	r8, #1
 888:	e59d3004 	ldr	r3, [sp, #4]
 88c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 890:	e3560000 	cmp	r6, #0
 894:	e59db00c 	ldr	r11, [sp, #12]
 898:	0a000033 	beq	96c <__call_exitprocs+0x10c>
 89c:	e5965004 	ldr	r5, [r6, #4]
 8a0:	e2554001 	subs	r4, r5, #1
 8a4:	5286a088 	addpl	r10, r6, #136	; 0x88
 8a8:	5285501f 	addpl	r5, r5, #31
 8ac:	508a5105 	addpl	r5, r10, r5, lsl #2
 8b0:	5a000007 	bpl	8d4 <__call_exitprocs+0x74>
 8b4:	ea000029 	b	960 <__call_exitprocs+0x100>
 8b8:	e5953000 	ldr	r3, [r5]
 8bc:	e1530007 	cmp	r3, r7
 8c0:	0a000005 	beq	8dc <__call_exitprocs+0x7c>
 8c4:	e2444001 	sub	r4, r4, #1
 8c8:	e3740001 	cmn	r4, #1
 8cc:	e2455004 	sub	r5, r5, #4
 8d0:	0a000022 	beq	960 <__call_exitprocs+0x100>
 8d4:	e3570000 	cmp	r7, #0
 8d8:	1afffff6 	bne	8b8 <__call_exitprocs+0x58>
 8dc:	e5963004 	ldr	r3, [r6, #4]
 8e0:	e06a2005 	rsb	r2, r10, r5
 8e4:	e2433001 	sub	r3, r3, #1
 8e8:	e0862002 	add	r2, r6, r2
 8ec:	e1530004 	cmp	r3, r4
 8f0:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 8f4:	13a01000 	movne	r1, #0
 8f8:	05864004 	streq	r4, [r6, #4]
 8fc:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 900:	e3530000 	cmp	r3, #0
 904:	0affffee 	beq	8c4 <__call_exitprocs+0x64>
 908:	e1a02418 	lsl	r2, r8, r4
 90c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 910:	e1120001 	tst	r2, r1
 914:	e5969004 	ldr	r9, [r6, #4]
 918:	0a000016 	beq	978 <__call_exitprocs+0x118>
 91c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 920:	e1120001 	tst	r2, r1
 924:	1a000016 	bne	984 <__call_exitprocs+0x124>
 928:	e59d0008 	ldr	r0, [sp, #8]
 92c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 930:	e1a0e00f 	mov	lr, pc
 934:	e12fff13 	bx	r3
 938:	e5963004 	ldr	r3, [r6, #4]
 93c:	e1530009 	cmp	r3, r9
 940:	1affffd0 	bne	888 <__call_exitprocs+0x28>
 944:	e59b3000 	ldr	r3, [r11]
 948:	e1530006 	cmp	r3, r6
 94c:	1affffcd 	bne	888 <__call_exitprocs+0x28>
 950:	e2444001 	sub	r4, r4, #1
 954:	e3740001 	cmn	r4, #1
 958:	e2455004 	sub	r5, r5, #4
 95c:	1affffdc 	bne	8d4 <__call_exitprocs+0x74>
 960:	e59f1070 	ldr	r1, [pc, #112]	; 9d8 <__call_exitprocs+0x178>
 964:	e3510000 	cmp	r1, #0
 968:	1a000009 	bne	994 <__call_exitprocs+0x134>
 96c:	e28dd014 	add	sp, sp, #20
 970:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 974:	e12fff1e 	bx	lr
 978:	e1a0e00f 	mov	lr, pc
 97c:	e12fff13 	bx	r3
 980:	eaffffec 	b	938 <__call_exitprocs+0xd8>
 984:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 988:	e1a0e00f 	mov	lr, pc
 98c:	e12fff13 	bx	r3
 990:	eaffffe8 	b	938 <__call_exitprocs+0xd8>
 994:	e5963004 	ldr	r3, [r6, #4]
 998:	e3530000 	cmp	r3, #0
 99c:	e5963000 	ldr	r3, [r6]
 9a0:	1a000008 	bne	9c8 <__call_exitprocs+0x168>
 9a4:	e3530000 	cmp	r3, #0
 9a8:	0a000006 	beq	9c8 <__call_exitprocs+0x168>
 9ac:	e1a00006 	mov	r0, r6
 9b0:	e58b3000 	str	r3, [r11]
 9b4:	e320f000 	nop	{0}
 9b8:	e59b6000 	ldr	r6, [r11]
 9bc:	e3560000 	cmp	r6, #0
 9c0:	1affffb5 	bne	89c <__call_exitprocs+0x3c>
 9c4:	eaffffe8 	b	96c <__call_exitprocs+0x10c>
 9c8:	e1a0b006 	mov	r11, r6
 9cc:	e1a06003 	mov	r6, r3
 9d0:	eafffff9 	b	9bc <__call_exitprocs+0x15c>
 9d4:	00000b50 	.word	0x00000b50
 9d8:	00000000 	.word	0x00000000

000009dc <register_fini>:
 9dc:	e92d4008 	push	{r3, lr}
 9e0:	e59f3010 	ldr	r3, [pc, #16]	; 9f8 <register_fini+0x1c>
 9e4:	e3530000 	cmp	r3, #0
 9e8:	159f000c 	ldrne	r0, [pc, #12]	; 9fc <register_fini+0x20>
 9ec:	1bffff49 	blne	718 <atexit>
 9f0:	e8bd4008 	pop	{r3, lr}
 9f4:	e12fff1e 	bx	lr
 9f8:	00000b78 	.word	0x00000b78
 9fc:	00000a00 	.word	0x00000a00

00000a00 <__libc_fini_array>:
 a00:	e92d4038 	push	{r3, r4, r5, lr}
 a04:	e59f5030 	ldr	r5, [pc, #48]	; a3c <__libc_fini_array+0x3c>
 a08:	e59f4030 	ldr	r4, [pc, #48]	; a40 <__libc_fini_array+0x40>
 a0c:	e0654004 	rsb	r4, r5, r4
 a10:	e1b04144 	asrs	r4, r4, #2
 a14:	10855104 	addne	r5, r5, r4, lsl #2
 a18:	0a000004 	beq	a30 <__libc_fini_array+0x30>
 a1c:	e5353004 	ldr	r3, [r5, #-4]!
 a20:	e1a0e00f 	mov	lr, pc
 a24:	e12fff13 	bx	r3
 a28:	e2544001 	subs	r4, r4, #1
 a2c:	1afffffa 	bne	a1c <__libc_fini_array+0x1c>
 a30:	eb000050 	bl	b78 <__libc_fini>
 a34:	e8bd4038 	pop	{r3, r4, r5, lr}
 a38:	e12fff1e 	bx	lr
 a3c:	00000b90 	.word	0x00000b90
 a40:	00000b94 	.word	0x00000b94

00000a44 <__cs3_premain>:
 a44:	e92d4008 	push	{r3, lr}
 a48:	eb00001d 	bl	ac4 <__libc_init_array>
 a4c:	e59f3030 	ldr	r3, [pc, #48]	; a84 <__cs3_premain+0x40>
 a50:	e3530000 	cmp	r3, #0
 a54:	15930000 	ldrne	r0, [r3]
 a58:	01a00003 	moveq	r0, r3
 a5c:	e59f3024 	ldr	r3, [pc, #36]	; a88 <__cs3_premain+0x44>
 a60:	e3530000 	cmp	r3, #0
 a64:	15931000 	ldrne	r1, [r3]
 a68:	01a01003 	moveq	r1, r3
 a6c:	e3a02000 	mov	r2, #0
 a70:	ebfffeb6 	bl	550 <main>
 a74:	e59f3010 	ldr	r3, [pc, #16]	; a8c <__cs3_premain+0x48>
 a78:	e3530000 	cmp	r3, #0
 a7c:	1bffff2d 	blne	738 <exit>
 a80:	eafffffe 	b	a80 <__cs3_premain+0x3c>
	...
 a8c:	00000738 	.word	0x00000738

00000a90 <_exit>:
 a90:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 a94:	e3a00018 	mov	r0, #24
 a98:	e59f1004 	ldr	r1, [pc, #4]	; aa4 <_exit+0x14>
 a9c:	ef123456 	svc	0x00123456
 aa0:	eafffffe 	b	aa0 <_exit+0x10>
 aa4:	00020026 	.word	0x00020026

00000aa8 <__cs3_isr_interrupt>:
 aa8:	eafffffe 	b	aa8 <__cs3_isr_interrupt>

00000aac <__cs3_isr_undef>:
 aac:	eafffffe 	b	aac <__cs3_isr_undef>

00000ab0 <__cs3_isr_swi>:
 ab0:	eafffffe 	b	ab0 <__cs3_isr_swi>

00000ab4 <__cs3_isr_pabort>:
 ab4:	eafffffe 	b	ab4 <__cs3_isr_pabort>

00000ab8 <__cs3_isr_dabort>:
 ab8:	eafffffe 	b	ab8 <__cs3_isr_dabort>

00000abc <__cs3_isr_irq>:
 abc:	eafffffe 	b	abc <__cs3_isr_irq>

00000ac0 <__cs3_isr_fiq>:
 ac0:	eafffffe 	b	ac0 <__cs3_isr_fiq>

00000ac4 <__libc_init_array>:
 ac4:	e92d4070 	push	{r4, r5, r6, lr}
 ac8:	e59f506c 	ldr	r5, [pc, #108]	; b3c <__libc_init_array+0x78>
 acc:	e59f606c 	ldr	r6, [pc, #108]	; b40 <__libc_init_array+0x7c>
 ad0:	e0656006 	rsb	r6, r5, r6
 ad4:	e1b06146 	asrs	r6, r6, #2
 ad8:	12455004 	subne	r5, r5, #4
 adc:	13a04000 	movne	r4, #0
 ae0:	0a000005 	beq	afc <__libc_init_array+0x38>
 ae4:	e5b53004 	ldr	r3, [r5, #4]!
 ae8:	e2844001 	add	r4, r4, #1
 aec:	e1a0e00f 	mov	lr, pc
 af0:	e12fff13 	bx	r3
 af4:	e1560004 	cmp	r6, r4
 af8:	1afffff9 	bne	ae4 <__libc_init_array+0x20>
 afc:	e59f5040 	ldr	r5, [pc, #64]	; b44 <__libc_init_array+0x80>
 b00:	e59f6040 	ldr	r6, [pc, #64]	; b48 <__libc_init_array+0x84>
 b04:	e0656006 	rsb	r6, r5, r6
 b08:	eb000012 	bl	b58 <_init>
 b0c:	e1b06146 	asrs	r6, r6, #2
 b10:	12455004 	subne	r5, r5, #4
 b14:	13a04000 	movne	r4, #0
 b18:	0a000005 	beq	b34 <__libc_init_array+0x70>
 b1c:	e5b53004 	ldr	r3, [r5, #4]!
 b20:	e2844001 	add	r4, r4, #1
 b24:	e1a0e00f 	mov	lr, pc
 b28:	e12fff13 	bx	r3
 b2c:	e1560004 	cmp	r6, r4
 b30:	1afffff9 	bne	b1c <__libc_init_array+0x58>
 b34:	e8bd4070 	pop	{r4, r5, r6, lr}
 b38:	e12fff1e 	bx	lr
 b3c:	00000b70 	.word	0x00000b70
 b40:	00000b70 	.word	0x00000b70
 b44:	00000b70 	.word	0x00000b70
 b48:	00000b78 	.word	0x00000b78

Disassembly of section .rodata:

00000b50 <_global_impure_ptr>:
 b50:	00000bb8 00000043                       ....C...

00000b58 <_init>:
 b58:	e1a0c00d 	mov	r12, sp
 b5c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 b60:	e24cb004 	sub	r11, r12, #4
 b64:	e24bd028 	sub	sp, r11, #40	; 0x28
 b68:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 b6c:	e12fff1e 	bx	lr

00000b70 <__init_array_start>:
 b70:	000009dc 	.word	0x000009dc

00000b74 <__frame_dummy_init_array_entry>:
 b74:	00000208                                ....

00000b78 <__libc_fini>:
 b78:	e1a0c00d 	mov	r12, sp
 b7c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 b80:	e24cb004 	sub	r11, r12, #4
 b84:	e24bd028 	sub	sp, r11, #40	; 0x28
 b88:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 b8c:	e12fff1e 	bx	lr

00000b90 <__fini_array_start>:
 b90:	000001c4 	.word	0x000001c4

00000b94 <__cs3_regions>:
 b94:	00000000 	.word	0x00000000
 b98:	00000040 	.word	0x00000040
 b9c:	00000040 	.word	0x00000040
 ba0:	00000fa8 	.word	0x00000fa8
 ba4:	00000020 	.word	0x00000020
